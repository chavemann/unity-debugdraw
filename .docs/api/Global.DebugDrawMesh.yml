### YamlMime:ManagedReference
items:
- uid: Global.DebugDrawMesh
  commentId: T:Global.DebugDrawMesh
  id: DebugDrawMesh
  parent: Global
  children:
  - Global.DebugDrawMesh.#ctor(UnityEngine.MeshTopology)
  - Global.DebugDrawMesh.Add``1(``0)
  - Global.DebugDrawMesh.AddColor(DebugDrawItems.BaseItem,UnityEngine.Color@)
  - Global.DebugDrawMesh.AddColor(UnityEngine.Color@)
  - Global.DebugDrawMesh.AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@)
  - Global.DebugDrawMesh.AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@)
  - Global.DebugDrawMesh.AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@)
  - Global.DebugDrawMesh.AddColorX2(DebugDrawItems.BaseItem,UnityEngine.Color@)
  - Global.DebugDrawMesh.AddColorX2(UnityEngine.Color@)
  - Global.DebugDrawMesh.AddColorX3(DebugDrawItems.BaseItem,UnityEngine.Color@)
  - Global.DebugDrawMesh.AddColorX3(UnityEngine.Color@)
  - Global.DebugDrawMesh.AddColorX4(DebugDrawItems.BaseItem,UnityEngine.Color@)
  - Global.DebugDrawMesh.AddColorX4(UnityEngine.Color@)
  - Global.DebugDrawMesh.AddIndex
  - Global.DebugDrawMesh.AddIndex(System.Int32)
  - Global.DebugDrawMesh.AddIndexX2
  - Global.DebugDrawMesh.AddIndexX3
  - Global.DebugDrawMesh.AddIndexX4
  - Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32)
  - Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32)
  - Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32,System.Int32)
  - Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - Global.DebugDrawMesh.AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@)
  - Global.DebugDrawMesh.AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color)
  - Global.DebugDrawMesh.AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  - Global.DebugDrawMesh.AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  - Global.DebugDrawMesh.AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color)
  - Global.DebugDrawMesh.AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  - Global.DebugDrawMesh.AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@)
  - Global.DebugDrawMesh.AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@)
  - Global.DebugDrawMesh.AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  - Global.DebugDrawMesh.AddLines(DebugDrawItems.BaseItem,System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color})
  - Global.DebugDrawMesh.AddPoints(DebugDrawItems.BaseItem,System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color})
  - Global.DebugDrawMesh.AddPreviousVertexIndex(System.Int32)
  - Global.DebugDrawMesh.AddQuadLineIndices
  - Global.DebugDrawMesh.AddTriangleLineIndices
  - Global.DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem,System.Single,System.Single)
  - Global.DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem,System.Single,System.Single,System.Single)
  - Global.DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem,UnityEngine.Vector3@)
  - Global.DebugDrawMesh.AddVertex(System.Single,System.Single)
  - Global.DebugDrawMesh.AddVertex(System.Single,System.Single,System.Single)
  - Global.DebugDrawMesh.AddVertex(UnityEngine.Matrix4x4@,System.Single,System.Single)
  - Global.DebugDrawMesh.AddVertex(UnityEngine.Matrix4x4@,System.Single,System.Single,System.Single)
  - Global.DebugDrawMesh.AddVertex(UnityEngine.Matrix4x4@,UnityEngine.Vector3@)
  - Global.DebugDrawMesh.AddVertex(UnityEngine.Vector3@)
  - Global.DebugDrawMesh.AddVertices(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  - Global.DebugDrawMesh.AddVertices(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  - Global.DebugDrawMesh.Arc(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,DebugDrawItems.DrawArcSegments,DebugDrawItems.DrawEllipseAxes,System.Single)
  - Global.DebugDrawMesh.Arc(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,DebugDrawItems.DrawArcSegments,DebugDrawItems.DrawEllipseAxes,System.Single)
  - Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean,System.Boolean,System.Single)
  - Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)
  - Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Boolean,System.Boolean,System.Single)
  - Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Single,DebugDrawItems.ArrowShape,DebugDrawItems.ArrowShape,System.Boolean,System.Boolean,System.Single)
  - Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)
  - Global.DebugDrawMesh.Axes(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Boolean,System.Single)
  - Global.DebugDrawMesh.Axes(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Boolean,System.Single)
  - Global.DebugDrawMesh.Box(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Box(UnityEngine.Vector3,System.Single,UnityEngine.Quaternion,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Box(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Box(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Build
  - Global.DebugDrawMesh.Capsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.Clear
  - Global.DebugDrawMesh.ClearAll
  - Global.DebugDrawMesh.ClearMesh
  - Global.DebugDrawMesh.Color
  - Global.DebugDrawMesh.colours
  - Global.DebugDrawMesh.Cone(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Boolean,System.Single)
  - Global.DebugDrawMesh.CreateMesh
  - Global.DebugDrawMesh.Cull
  - Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  - Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  - Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  - Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  - Global.DebugDrawMesh.Dot(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.Dot(UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Vector3,System.Int32,System.Single)
  - Global.DebugDrawMesh.Dots(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Int32,System.Single)
  - Global.DebugDrawMesh.Dots(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},UnityEngine.Vector3,System.Int32,System.Single)
  - Global.DebugDrawMesh.DstBlend
  - Global.DebugDrawMesh.Ellipse(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Int32,DebugDrawItems.DrawEllipseAxes,System.Single)
  - Global.DebugDrawMesh.Ellipse(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Int32,DebugDrawItems.DrawEllipseAxes,System.Single)
  - Global.DebugDrawMesh.FillArc(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.FillArc(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.FillEllipse(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.FillEllipse(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.FillQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.FillQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.FillRectangle(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.FillRectangle(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.FillTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.FillTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.indices
  - Global.DebugDrawMesh.items
  - Global.DebugDrawMesh.Line(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Line(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Lines(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  - Global.DebugDrawMesh.Lines3D(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Nullable{UnityEngine.Vector3},System.Single)
  - Global.DebugDrawMesh.Lines3D(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  - Global.DebugDrawMesh.Mesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Int32},UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Mesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Collections.Generic.List{System.Int32},System.Single)
  - Global.DebugDrawMesh.Mesh(UnityEngine.Mesh,System.Nullable{UnityEngine.Color},System.Single)
  - Global.DebugDrawMesh.Point(UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Points(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  - Global.DebugDrawMesh.Quad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Quad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Rectangle(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Rectangle(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Remove(DebugDrawItems.BaseItem)
  - Global.DebugDrawMesh.SetCulling(UnityEngine.Rendering.CullMode)
  - Global.DebugDrawMesh.SetDepthTesting(System.Boolean)
  - Global.DebugDrawMesh.SetDepthTesting(System.Boolean,System.Boolean)
  - Global.DebugDrawMesh.SetInvertColours(System.Boolean)
  - Global.DebugDrawMesh.Sphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.Sphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.Sphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.SrcBlend
  - Global.DebugDrawMesh.Text(UnityEngine.Vector3,System.String,UnityEngine.Color,UnityEngine.TextAnchor,System.Single,System.Single)
  - Global.DebugDrawMesh.Text(UnityEngine.Vector3,System.String,UnityEngine.TextAnchor,System.Single,System.Single)
  - Global.DebugDrawMesh.Triangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Triangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  - Global.DebugDrawMesh.Update
  - Global.DebugDrawMesh.UpdateMesh(UnityEngine.Mesh)
  - Global.DebugDrawMesh.vertexIndex
  - Global.DebugDrawMesh.vertices
  - Global.DebugDrawMesh.WireCapsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.WireCone(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Boolean,System.Single)
  - Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  - Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  - Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  - Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  - Global.DebugDrawMesh.WireSphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.WireSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.WireSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Int32,System.Single)
  - Global.DebugDrawMesh.ZTest
  - Global.DebugDrawMesh.ZWrite
  langs:
  - csharp
  - vb
  name: DebugDrawMesh
  nameWithType: DebugDrawMesh
  fullName: DebugDrawMesh
  type: Class
  source:
    id: DebugDrawMesh
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1465
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDirect access to a debug mesh.\nNormally this class won&apos;t be used directly - instead it will automatically be created and managed by <xref href=\"DebugDraw\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class DebugDrawMesh
    content.vb: Public Class DebugDrawMesh
  inheritance:
  - System.Object
  derivedClasses:
  - Global.DebugDrawTextMesh
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Global.DebugDrawMesh.Color
  commentId: F:Global.DebugDrawMesh.Color
  id: Color
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Color
  nameWithType: DebugDrawMesh.Color
  fullName: DebugDrawMesh.Color
  type: Field
  source:
    id: Color
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 16
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  syntax:
    content: public static readonly int Color
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Color As Integer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Global.DebugDrawMesh.SrcBlend
  commentId: F:Global.DebugDrawMesh.SrcBlend
  id: SrcBlend
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: SrcBlend
  nameWithType: DebugDrawMesh.SrcBlend
  fullName: DebugDrawMesh.SrcBlend
  type: Field
  source:
    id: SrcBlend
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 17
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  syntax:
    content: public static readonly int SrcBlend
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly SrcBlend As Integer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Global.DebugDrawMesh.DstBlend
  commentId: F:Global.DebugDrawMesh.DstBlend
  id: DstBlend
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: DstBlend
  nameWithType: DebugDrawMesh.DstBlend
  fullName: DebugDrawMesh.DstBlend
  type: Field
  source:
    id: DstBlend
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 18
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  syntax:
    content: public static readonly int DstBlend
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly DstBlend As Integer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Global.DebugDrawMesh.Cull
  commentId: F:Global.DebugDrawMesh.Cull
  id: Cull
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Cull
  nameWithType: DebugDrawMesh.Cull
  fullName: DebugDrawMesh.Cull
  type: Field
  source:
    id: Cull
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 19
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  syntax:
    content: public static readonly int Cull
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Cull As Integer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Global.DebugDrawMesh.ZWrite
  commentId: F:Global.DebugDrawMesh.ZWrite
  id: ZWrite
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: ZWrite
  nameWithType: DebugDrawMesh.ZWrite
  fullName: DebugDrawMesh.ZWrite
  type: Field
  source:
    id: ZWrite
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 20
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  syntax:
    content: public static readonly int ZWrite
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly ZWrite As Integer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Global.DebugDrawMesh.ZTest
  commentId: F:Global.DebugDrawMesh.ZTest
  id: ZTest
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: ZTest
  nameWithType: DebugDrawMesh.ZTest
  fullName: DebugDrawMesh.ZTest
  type: Field
  source:
    id: ZTest
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 21
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  syntax:
    content: public static readonly int ZTest
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly ZTest As Integer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Global.DebugDrawMesh.vertices
  commentId: F:Global.DebugDrawMesh.vertices
  id: vertices
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: vertices
  nameWithType: DebugDrawMesh.vertices
  fullName: DebugDrawMesh.vertices
  type: Field
  source:
    id: vertices
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 29
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nThe mesh vertices populated during <xref href=\"DebugDrawMesh.Build\" data-throw-if-not-resolved=\"false\"></xref>. Generally don&apos;t access directly.\n"
  example: []
  syntax:
    content: public readonly List<Vector3> vertices
    return:
      type: System.Collections.Generic.List{UnityEngine.Vector3}
    content.vb: Public ReadOnly vertices As List(Of Vector3)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Global.DebugDrawMesh.colours
  commentId: F:Global.DebugDrawMesh.colours
  id: colours
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: colours
  nameWithType: DebugDrawMesh.colours
  fullName: DebugDrawMesh.colours
  type: Field
  source:
    id: colours
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 33
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nThe mesh vertex colours populated during <xref href=\"DebugDrawMesh.Build\" data-throw-if-not-resolved=\"false\"></xref>. Generally don&apos;t access directly.\n"
  example: []
  syntax:
    content: public readonly List<Color> colours
    return:
      type: System.Collections.Generic.List{UnityEngine.Color}
    content.vb: Public ReadOnly colours As List(Of Color)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Global.DebugDrawMesh.indices
  commentId: F:Global.DebugDrawMesh.indices
  id: indices
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: indices
  nameWithType: DebugDrawMesh.indices
  fullName: DebugDrawMesh.indices
  type: Field
  source:
    id: indices
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 37
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nThe mesh indices populated during <xref href=\"DebugDrawMesh.Build\" data-throw-if-not-resolved=\"false\"></xref>. Generally don&apos;t access directly.\n"
  example: []
  syntax:
    content: public readonly List<int> indices
    return:
      type: System.Collections.Generic.List{System.Int32}
    content.vb: Public ReadOnly indices As List(Of Integer)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Global.DebugDrawMesh.items
  commentId: F:Global.DebugDrawMesh.items
  id: items
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: items
  nameWithType: DebugDrawMesh.items
  fullName: DebugDrawMesh.items
  type: Field
  source:
    id: items
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 50
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  syntax:
    content: protected readonly List<BaseItem> items
    return:
      type: System.Collections.Generic.List{DebugDrawItems.BaseItem}
    content.vb: Protected ReadOnly items As List(Of BaseItem)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Global.DebugDrawMesh.vertexIndex
  commentId: F:Global.DebugDrawMesh.vertexIndex
  id: vertexIndex
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: vertexIndex
  nameWithType: DebugDrawMesh.vertexIndex
  fullName: DebugDrawMesh.vertexIndex
  type: Field
  source:
    id: vertexIndex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 57
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nTracks the current vertex index during <xref href=\"DebugDrawMesh.Build\" data-throw-if-not-resolved=\"false\"></xref>. Generally don&apos;t access directly.\n"
  example: []
  syntax:
    content: public int vertexIndex
    return:
      type: System.Int32
    content.vb: Public vertexIndex As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.#ctor(UnityEngine.MeshTopology)
  commentId: M:Global.DebugDrawMesh.#ctor(UnityEngine.MeshTopology)
  id: '#ctor(UnityEngine.MeshTopology)'
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: DebugDrawMesh(MeshTopology)
  nameWithType: DebugDrawMesh.DebugDrawMesh(MeshTopology)
  fullName: DebugDrawMesh.DebugDrawMesh(UnityEngine.MeshTopology)
  type: Constructor
  source:
    id: .ctor
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 66
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nCreates a mesh with the specified topology\n"
  example: []
  syntax:
    content: public DebugDrawMesh(MeshTopology type)
    parameters:
    - id: type
      type: UnityEngine.MeshTopology
      description: The kind of mesh topology.
    content.vb: Public Sub New(type As MeshTopology)
  overload: Global.DebugDrawMesh.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.CreateMesh
  commentId: M:Global.DebugDrawMesh.CreateMesh
  id: CreateMesh
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: CreateMesh()
  nameWithType: DebugDrawMesh.CreateMesh()
  fullName: DebugDrawMesh.CreateMesh()
  type: Method
  source:
    id: CreateMesh
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 79
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nCreates the Unity Mesh used by this instance if it does not exist.\n"
  example: []
  syntax:
    content: public void CreateMesh()
    content.vb: Public Sub CreateMesh
  overload: Global.DebugDrawMesh.CreateMesh*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.SetInvertColours(System.Boolean)
  commentId: M:Global.DebugDrawMesh.SetInvertColours(System.Boolean)
  id: SetInvertColours(System.Boolean)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: SetInvertColours(Boolean)
  nameWithType: DebugDrawMesh.SetInvertColours(Boolean)
  fullName: DebugDrawMesh.SetInvertColours(System.Boolean)
  type: Method
  source:
    id: SetInvertColours
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 115
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nSets this mesh&apos;s material (if it has one) blend mode to invert destination colors.\n"
  example: []
  syntax:
    content: public DebugDrawMesh SetInvertColours(bool invert = true)
    parameters:
    - id: invert
      type: System.Boolean
      description: True to invert colours.
    return:
      type: Global.DebugDrawMesh
    content.vb: Public Function SetInvertColours(invert As Boolean = True) As DebugDrawMesh
  overload: Global.DebugDrawMesh.SetInvertColours*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.SetCulling(UnityEngine.Rendering.CullMode)
  commentId: M:Global.DebugDrawMesh.SetCulling(UnityEngine.Rendering.CullMode)
  id: SetCulling(UnityEngine.Rendering.CullMode)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: SetCulling(CullMode)
  nameWithType: DebugDrawMesh.SetCulling(CullMode)
  fullName: DebugDrawMesh.SetCulling(UnityEngine.Rendering.CullMode)
  type: Method
  source:
    id: SetCulling
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 138
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nSets this mesh&apos;s material (if it has one) culling mode.\n"
  example: []
  syntax:
    content: public DebugDrawMesh SetCulling(CullMode mode)
    parameters:
    - id: mode
      type: UnityEngine.Rendering.CullMode
      description: The cull mode.
    return:
      type: Global.DebugDrawMesh
    content.vb: Public Function SetCulling(mode As CullMode) As DebugDrawMesh
  overload: Global.DebugDrawMesh.SetCulling*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.SetDepthTesting(System.Boolean)
  commentId: M:Global.DebugDrawMesh.SetDepthTesting(System.Boolean)
  id: SetDepthTesting(System.Boolean)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: SetDepthTesting(Boolean)
  nameWithType: DebugDrawMesh.SetDepthTesting(Boolean)
  fullName: DebugDrawMesh.SetDepthTesting(System.Boolean)
  type: Method
  source:
    id: SetDepthTesting
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 152
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nSets this mesh&apos;s material (if it has one) depth testing.\n"
  example: []
  syntax:
    content: public DebugDrawMesh SetDepthTesting(bool enabled = true)
    parameters:
    - id: enabled
      type: System.Boolean
      description: Is depth testing enabled.
    return:
      type: Global.DebugDrawMesh
    content.vb: Public Function SetDepthTesting(enabled As Boolean = True) As DebugDrawMesh
  overload: Global.DebugDrawMesh.SetDepthTesting*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.SetDepthTesting(System.Boolean,System.Boolean)
  commentId: M:Global.DebugDrawMesh.SetDepthTesting(System.Boolean,System.Boolean)
  id: SetDepthTesting(System.Boolean,System.Boolean)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: SetDepthTesting(Boolean, Boolean)
  nameWithType: DebugDrawMesh.SetDepthTesting(Boolean, Boolean)
  fullName: DebugDrawMesh.SetDepthTesting(System.Boolean, System.Boolean)
  type: Method
  source:
    id: SetDepthTesting
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 167
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nSets this mesh&apos;s material (if it has one) depth testing.\n"
  example: []
  syntax:
    content: public DebugDrawMesh SetDepthTesting(bool write, bool test)
    parameters:
    - id: write
      type: System.Boolean
      description: Enable depth writes.
    - id: test
      type: System.Boolean
      description: Enable depth tests.
    return:
      type: Global.DebugDrawMesh
    content.vb: Public Function SetDepthTesting(write As Boolean, test As Boolean) As DebugDrawMesh
  overload: Global.DebugDrawMesh.SetDepthTesting*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Add``1(``0)
  commentId: M:Global.DebugDrawMesh.Add``1(``0)
  id: Add``1(``0)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Add<T>(T)
  nameWithType: DebugDrawMesh.Add<T>(T)
  fullName: DebugDrawMesh.Add<T>(T)
  type: Method
  source:
    id: Add
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 188
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdd an item to this mesh. Items are only &quot;rendered&quot; when <xref href=\"DebugDrawMesh.Build\" data-throw-if-not-resolved=\"false\"></xref> is called.\nNormally this method won&apos;t be used directly - instead use the specific debug methods (e.g. <xref href=\"DebugDrawItems.Line\" data-throw-if-not-resolved=\"false\"></xref>)\nor the similar static methods in <xref href=\"DebugDraw\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      public T Add<T>(T item)
          where T : BaseItem
    parameters:
    - id: item
      type: '{T}'
      description: .
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Function Add(Of T As BaseItem)(item As T) As T
  overload: Global.DebugDrawMesh.Add*
  nameWithType.vb: DebugDrawMesh.Add(Of T)(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.Add(Of T)(T)
  name.vb: Add(Of T)(T)
- uid: Global.DebugDrawMesh.Remove(DebugDrawItems.BaseItem)
  commentId: M:Global.DebugDrawMesh.Remove(DebugDrawItems.BaseItem)
  id: Remove(DebugDrawItems.BaseItem)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Remove(BaseItem)
  nameWithType: DebugDrawMesh.Remove(BaseItem)
  fullName: DebugDrawMesh.Remove(DebugDrawItems.BaseItem)
  type: Method
  source:
    id: Remove
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 212
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nImmediately removes the item from this mesh.\n"
  example: []
  syntax:
    content: public void Remove(BaseItem item)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item to remove.
    content.vb: Public Sub Remove(item As BaseItem)
  overload: Global.DebugDrawMesh.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Clear
  commentId: M:Global.DebugDrawMesh.Clear
  id: Clear
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: DebugDrawMesh.Clear()
  fullName: DebugDrawMesh.Clear()
  type: Method
  source:
    id: Clear
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 227
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nRemoves all debug items added to this mesh.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Global.DebugDrawMesh.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.ClearMesh
  commentId: M:Global.DebugDrawMesh.ClearMesh
  id: ClearMesh
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: ClearMesh()
  nameWithType: DebugDrawMesh.ClearMesh()
  fullName: DebugDrawMesh.ClearMesh()
  type: Method
  source:
    id: ClearMesh
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 240
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nClears the this DebugDrawMesh&apos;s Unity Mesh if it has been created.\n"
  example: []
  syntax:
    content: public void ClearMesh()
    content.vb: Public Sub ClearMesh
  overload: Global.DebugDrawMesh.ClearMesh*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.ClearAll
  commentId: M:Global.DebugDrawMesh.ClearAll
  id: ClearAll
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: ClearAll()
  nameWithType: DebugDrawMesh.ClearAll()
  fullName: DebugDrawMesh.ClearAll()
  type: Method
  source:
    id: ClearAll
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 254
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nClears all the items as well as this DebugDrawMesh&apos;s Unity Mesh.\n"
  example: []
  syntax:
    content: public void ClearAll()
    content.vb: Public Sub ClearAll
  overload: Global.DebugDrawMesh.ClearAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Update
  commentId: M:Global.DebugDrawMesh.Update
  id: Update
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: DebugDrawMesh.Update()
  fullName: DebugDrawMesh.Update()
  type: Method
  source:
    id: Update
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 263
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nUpdates all items, clearing ones that have expired.\n"
  example: []
  syntax:
    content: public void Update()
    content.vb: Public Sub Update
  overload: Global.DebugDrawMesh.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Build
  commentId: M:Global.DebugDrawMesh.Build
  id: Build
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Build()
  nameWithType: DebugDrawMesh.Build()
  fullName: DebugDrawMesh.Build()
  type: Method
  source:
    id: Build
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 286
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nBuilds all the debug items, filling the <xref href=\"DebugDrawMesh.vertices\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"DebugDrawMesh.colours\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"DebugDrawMesh.indices\" data-throw-if-not-resolved=\"false\"></xref> arrays.\nWill also call <xref href=\"DebugDrawMesh.UpdateMesh(UnityEngine.Mesh)\" data-throw-if-not-resolved=\"false\"></xref> if this instance has an associated <xref href=\"DebugDrawMesh.Mesh(System.Collections.Generic.List%7bUnityEngine.Vector3%7d%2cSystem.Collections.Generic.List%7bUnityEngine.Color%7d%2cSystem.Collections.Generic.List%7bSystem.Int32%7d%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Build()
    content.vb: Public Sub Build
  overload: Global.DebugDrawMesh.Build*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.UpdateMesh(UnityEngine.Mesh)
  commentId: M:Global.DebugDrawMesh.UpdateMesh(UnityEngine.Mesh)
  id: UpdateMesh(UnityEngine.Mesh)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: UpdateMesh(Mesh)
  nameWithType: DebugDrawMesh.UpdateMesh(Mesh)
  fullName: DebugDrawMesh.UpdateMesh(UnityEngine.Mesh)
  type: Method
  source:
    id: UpdateMesh
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 324
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nPush the new vertex data to the mesh. If <xref href=\"DebugDrawMesh.CreateMesh\" data-throw-if-not-resolved=\"false\"></xref> was called, this will automatically\nbe called during <xref href=\"DebugDrawMesh.Build\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void UpdateMesh(Mesh mesh)
    parameters:
    - id: mesh
      type: UnityEngine.Mesh
      description: The mesh to update.
    content.vb: Public Sub UpdateMesh(mesh As Mesh)
  overload: Global.DebugDrawMesh.UpdateMesh*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddIndex
  commentId: M:Global.DebugDrawMesh.AddIndex
  id: AddIndex
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddIndex()
  nameWithType: DebugDrawMesh.AddIndex()
  fullName: DebugDrawMesh.AddIndex()
  type: Method
  source:
    id: AddIndex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 347
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds an index, incrementing <xref href=\"DebugDrawMesh.vertexIndex\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void AddIndex()
    content.vb: Public Sub AddIndex
  overload: Global.DebugDrawMesh.AddIndex*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddIndex(System.Int32)
  commentId: M:Global.DebugDrawMesh.AddIndex(System.Int32)
  id: AddIndex(System.Int32)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddIndex(Int32)
  nameWithType: DebugDrawMesh.AddIndex(Int32)
  fullName: DebugDrawMesh.AddIndex(System.Int32)
  type: Method
  source:
    id: AddIndex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 357
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds an index.\n"
  example: []
  syntax:
    content: public void AddIndex(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The index to add.
    content.vb: Public Sub AddIndex(index As Integer)
  overload: Global.DebugDrawMesh.AddIndex*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddIndexX2
  commentId: M:Global.DebugDrawMesh.AddIndexX2
  id: AddIndexX2
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddIndexX2()
  nameWithType: DebugDrawMesh.AddIndexX2()
  fullName: DebugDrawMesh.AddIndexX2()
  type: Method
  source:
    id: AddIndexX2
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 367
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds two indices, incrementing <xref href=\"DebugDrawMesh.vertexIndex\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void AddIndexX2()
    content.vb: Public Sub AddIndexX2
  overload: Global.DebugDrawMesh.AddIndexX2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddIndexX3
  commentId: M:Global.DebugDrawMesh.AddIndexX3
  id: AddIndexX3
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddIndexX3()
  nameWithType: DebugDrawMesh.AddIndexX3()
  fullName: DebugDrawMesh.AddIndexX3()
  type: Method
  source:
    id: AddIndexX3
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 377
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds three indices, incrementing <xref href=\"DebugDrawMesh.vertexIndex\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void AddIndexX3()
    content.vb: Public Sub AddIndexX3
  overload: Global.DebugDrawMesh.AddIndexX3*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddIndexX4
  commentId: M:Global.DebugDrawMesh.AddIndexX4
  id: AddIndexX4
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddIndexX4()
  nameWithType: DebugDrawMesh.AddIndexX4()
  fullName: DebugDrawMesh.AddIndexX4()
  type: Method
  source:
    id: AddIndexX4
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 388
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds four indices, incrementing <xref href=\"DebugDrawMesh.vertexIndex\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void AddIndexX4()
    content.vb: Public Sub AddIndexX4
  overload: Global.DebugDrawMesh.AddIndexX4*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32)
  commentId: M:Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32)
  id: AddIndices(System.Int32,System.Int32)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddIndices(Int32, Int32)
  nameWithType: DebugDrawMesh.AddIndices(Int32, Int32)
  fullName: DebugDrawMesh.AddIndices(System.Int32, System.Int32)
  type: Method
  source:
    id: AddIndices
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 400
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdd two indices.\n"
  example: []
  syntax:
    content: public void AddIndices(int index1, int index2)
    parameters:
    - id: index1
      type: System.Int32
    - id: index2
      type: System.Int32
    content.vb: Public Sub AddIndices(index1 As Integer, index2 As Integer)
  overload: Global.DebugDrawMesh.AddIndices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32)
  commentId: M:Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32)
  id: AddIndices(System.Int32,System.Int32,System.Int32)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddIndices(Int32, Int32, Int32)
  nameWithType: DebugDrawMesh.AddIndices(Int32, Int32, Int32)
  fullName: DebugDrawMesh.AddIndices(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    id: AddIndices
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 410
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdd three indices.\n"
  example: []
  syntax:
    content: public void AddIndices(int index1, int index2, int index3)
    parameters:
    - id: index1
      type: System.Int32
    - id: index2
      type: System.Int32
    - id: index3
      type: System.Int32
    content.vb: Public Sub AddIndices(index1 As Integer, index2 As Integer, index3 As Integer)
  overload: Global.DebugDrawMesh.AddIndices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32,System.Int32)
  id: AddIndices(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddIndices(Int32, Int32, Int32, Int32)
  nameWithType: DebugDrawMesh.AddIndices(Int32, Int32, Int32, Int32)
  fullName: DebugDrawMesh.AddIndices(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    id: AddIndices
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 421
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdd four indices.\n"
  example: []
  syntax:
    content: public void AddIndices(int index1, int index2, int index3, int index4)
    parameters:
    - id: index1
      type: System.Int32
    - id: index2
      type: System.Int32
    - id: index3
      type: System.Int32
    - id: index4
      type: System.Int32
    content.vb: Public Sub AddIndices(index1 As Integer, index2 As Integer, index3 As Integer, index4 As Integer)
  overload: Global.DebugDrawMesh.AddIndices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: AddIndices(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddIndices(Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: DebugDrawMesh.AddIndices(Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: DebugDrawMesh.AddIndices(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    id: AddIndices
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 433
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdd six indices.\n"
  example: []
  syntax:
    content: public void AddIndices(int index1, int index2, int index3, int index4, int index5, int index6)
    parameters:
    - id: index1
      type: System.Int32
    - id: index2
      type: System.Int32
    - id: index3
      type: System.Int32
    - id: index4
      type: System.Int32
    - id: index5
      type: System.Int32
    - id: index6
      type: System.Int32
    content.vb: Public Sub AddIndices(index1 As Integer, index2 As Integer, index3 As Integer, index4 As Integer, index5 As Integer, index6 As Integer)
  overload: Global.DebugDrawMesh.AddIndices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Global.DebugDrawMesh.AddIndices(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: AddIndices(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddIndices(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: DebugDrawMesh.AddIndices(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: DebugDrawMesh.AddIndices(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    id: AddIndices
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 447
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdd eight indices.\n"
  example: []
  syntax:
    content: public void AddIndices(int index1, int index2, int index3, int index4, int index5, int index6, int index7, int index8)
    parameters:
    - id: index1
      type: System.Int32
    - id: index2
      type: System.Int32
    - id: index3
      type: System.Int32
    - id: index4
      type: System.Int32
    - id: index5
      type: System.Int32
    - id: index6
      type: System.Int32
    - id: index7
      type: System.Int32
    - id: index8
      type: System.Int32
    content.vb: Public Sub AddIndices(index1 As Integer, index2 As Integer, index3 As Integer, index4 As Integer, index5 As Integer, index6 As Integer, index7 As Integer, index8 As Integer)
  overload: Global.DebugDrawMesh.AddIndices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddPreviousVertexIndex(System.Int32)
  commentId: M:Global.DebugDrawMesh.AddPreviousVertexIndex(System.Int32)
  id: AddPreviousVertexIndex(System.Int32)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddPreviousVertexIndex(Int32)
  nameWithType: DebugDrawMesh.AddPreviousVertexIndex(Int32)
  fullName: DebugDrawMesh.AddPreviousVertexIndex(System.Int32)
  type: Method
  source:
    id: AddPreviousVertexIndex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 464
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds a previous index (<code>vertexIndex - fromEnd</code>)\n"
  example: []
  syntax:
    content: public void AddPreviousVertexIndex(int fromEnd = 1)
    parameters:
    - id: fromEnd
      type: System.Int32
      description: .
    content.vb: Public Sub AddPreviousVertexIndex(fromEnd As Integer = 1)
  overload: Global.DebugDrawMesh.AddPreviousVertexIndex*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddTriangleLineIndices
  commentId: M:Global.DebugDrawMesh.AddTriangleLineIndices
  id: AddTriangleLineIndices
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddTriangleLineIndices()
  nameWithType: DebugDrawMesh.AddTriangleLineIndices()
  fullName: DebugDrawMesh.AddTriangleLineIndices()
  type: Method
  source:
    id: AddTriangleLineIndices
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 473
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds the indices forming a closed loop of three lines - 0,1 1,2 2,0.\n"
  example: []
  syntax:
    content: public void AddTriangleLineIndices()
    content.vb: Public Sub AddTriangleLineIndices
  overload: Global.DebugDrawMesh.AddTriangleLineIndices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddQuadLineIndices
  commentId: M:Global.DebugDrawMesh.AddQuadLineIndices
  id: AddQuadLineIndices
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddQuadLineIndices()
  nameWithType: DebugDrawMesh.AddQuadLineIndices()
  fullName: DebugDrawMesh.AddQuadLineIndices()
  type: Method
  source:
    id: AddQuadLineIndices
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 490
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds the indices forming a closed loop of four lines - 0,1 1,2 2,3 3,0.\n"
  example: []
  syntax:
    content: public void AddQuadLineIndices()
    content.vb: Public Sub AddQuadLineIndices
  overload: Global.DebugDrawMesh.AddQuadLineIndices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddColor(UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddColor(UnityEngine.Color@)
  id: AddColor(UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddColor(ref Color)
  nameWithType: DebugDrawMesh.AddColor(ref Color)
  fullName: DebugDrawMesh.AddColor(ref UnityEngine.Color)
  type: Method
  source:
    id: AddColor
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 514
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds a color\n"
  example: []
  syntax:
    content: public void AddColor(ref Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: The color to add.
    content.vb: Public Sub AddColor(ByRef color As Color)
  overload: Global.DebugDrawMesh.AddColor*
  nameWithType.vb: DebugDrawMesh.AddColor(ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddColor(ByRef UnityEngine.Color)
  name.vb: AddColor(ByRef Color)
- uid: Global.DebugDrawMesh.AddColorX2(UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddColorX2(UnityEngine.Color@)
  id: AddColorX2(UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddColorX2(ref Color)
  nameWithType: DebugDrawMesh.AddColorX2(ref Color)
  fullName: DebugDrawMesh.AddColorX2(ref UnityEngine.Color)
  type: Method
  source:
    id: AddColorX2
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 524
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds the same color twice\n"
  example: []
  syntax:
    content: public void AddColorX2(ref Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: The color to add.
    content.vb: Public Sub AddColorX2(ByRef color As Color)
  overload: Global.DebugDrawMesh.AddColorX2*
  nameWithType.vb: DebugDrawMesh.AddColorX2(ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddColorX2(ByRef UnityEngine.Color)
  name.vb: AddColorX2(ByRef Color)
- uid: Global.DebugDrawMesh.AddColorX3(UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddColorX3(UnityEngine.Color@)
  id: AddColorX3(UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddColorX3(ref Color)
  nameWithType: DebugDrawMesh.AddColorX3(ref Color)
  fullName: DebugDrawMesh.AddColorX3(ref UnityEngine.Color)
  type: Method
  source:
    id: AddColorX3
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 535
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds the same color three times\n"
  example: []
  syntax:
    content: public void AddColorX3(ref Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: The color to add.
    content.vb: Public Sub AddColorX3(ByRef color As Color)
  overload: Global.DebugDrawMesh.AddColorX3*
  nameWithType.vb: DebugDrawMesh.AddColorX3(ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddColorX3(ByRef UnityEngine.Color)
  name.vb: AddColorX3(ByRef Color)
- uid: Global.DebugDrawMesh.AddColorX4(UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddColorX4(UnityEngine.Color@)
  id: AddColorX4(UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddColorX4(ref Color)
  nameWithType: DebugDrawMesh.AddColorX4(ref Color)
  fullName: DebugDrawMesh.AddColorX4(ref UnityEngine.Color)
  type: Method
  source:
    id: AddColorX4
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 547
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds the same for times twice\n"
  example: []
  syntax:
    content: public void AddColorX4(ref Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
      description: The color to add.
    content.vb: Public Sub AddColorX4(ByRef color As Color)
  overload: Global.DebugDrawMesh.AddColorX4*
  nameWithType.vb: DebugDrawMesh.AddColorX4(ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddColorX4(ByRef UnityEngine.Color)
  name.vb: AddColorX4(ByRef Color)
- uid: Global.DebugDrawMesh.AddColor(DebugDrawItems.BaseItem,UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddColor(DebugDrawItems.BaseItem,UnityEngine.Color@)
  id: AddColor(DebugDrawItems.BaseItem,UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddColor(BaseItem, ref Color)
  nameWithType: DebugDrawMesh.AddColor(BaseItem, ref Color)
  fullName: DebugDrawMesh.AddColor(DebugDrawItems.BaseItem, ref UnityEngine.Color)
  type: Method
  source:
    id: AddColor
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 564
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds a color\n"
  example: []
  syntax:
    content: public void AddColor(BaseItem item, ref Color color)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item with which the color will be multiplied.
    - id: color
      type: UnityEngine.Color
      description: The color to add.
    content.vb: Public Sub AddColor(item As BaseItem, ByRef color As Color)
  overload: Global.DebugDrawMesh.AddColor*
  nameWithType.vb: DebugDrawMesh.AddColor(BaseItem, ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddColor(DebugDrawItems.BaseItem, ByRef UnityEngine.Color)
  name.vb: AddColor(BaseItem, ByRef Color)
- uid: Global.DebugDrawMesh.AddColorX2(DebugDrawItems.BaseItem,UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddColorX2(DebugDrawItems.BaseItem,UnityEngine.Color@)
  id: AddColorX2(DebugDrawItems.BaseItem,UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddColorX2(BaseItem, ref Color)
  nameWithType: DebugDrawMesh.AddColorX2(BaseItem, ref Color)
  fullName: DebugDrawMesh.AddColorX2(DebugDrawItems.BaseItem, ref UnityEngine.Color)
  type: Method
  source:
    id: AddColorX2
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 575
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds the same color twice\n"
  example: []
  syntax:
    content: public void AddColorX2(BaseItem item, ref Color color)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item with which the color will be multiplied.
    - id: color
      type: UnityEngine.Color
      description: The color to add.
    content.vb: Public Sub AddColorX2(item As BaseItem, ByRef color As Color)
  overload: Global.DebugDrawMesh.AddColorX2*
  nameWithType.vb: DebugDrawMesh.AddColorX2(BaseItem, ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddColorX2(DebugDrawItems.BaseItem, ByRef UnityEngine.Color)
  name.vb: AddColorX2(BaseItem, ByRef Color)
- uid: Global.DebugDrawMesh.AddColorX3(DebugDrawItems.BaseItem,UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddColorX3(DebugDrawItems.BaseItem,UnityEngine.Color@)
  id: AddColorX3(DebugDrawItems.BaseItem,UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddColorX3(BaseItem, ref Color)
  nameWithType: DebugDrawMesh.AddColorX3(BaseItem, ref Color)
  fullName: DebugDrawMesh.AddColorX3(DebugDrawItems.BaseItem, ref UnityEngine.Color)
  type: Method
  source:
    id: AddColorX3
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 596
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds the same color three times\n"
  example: []
  syntax:
    content: public void AddColorX3(BaseItem item, ref Color color)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item with which the color will be multiplied.
    - id: color
      type: UnityEngine.Color
      description: The color to add.
    content.vb: Public Sub AddColorX3(item As BaseItem, ByRef color As Color)
  overload: Global.DebugDrawMesh.AddColorX3*
  nameWithType.vb: DebugDrawMesh.AddColorX3(BaseItem, ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddColorX3(DebugDrawItems.BaseItem, ByRef UnityEngine.Color)
  name.vb: AddColorX3(BaseItem, ByRef Color)
- uid: Global.DebugDrawMesh.AddColorX4(DebugDrawItems.BaseItem,UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddColorX4(DebugDrawItems.BaseItem,UnityEngine.Color@)
  id: AddColorX4(DebugDrawItems.BaseItem,UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddColorX4(BaseItem, ref Color)
  nameWithType: DebugDrawMesh.AddColorX4(BaseItem, ref Color)
  fullName: DebugDrawMesh.AddColorX4(DebugDrawItems.BaseItem, ref UnityEngine.Color)
  type: Method
  source:
    id: AddColorX4
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 619
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds the same color times twice.\n"
  example: []
  syntax:
    content: public void AddColorX4(BaseItem item, ref Color color)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item with which the color will be multiplied.
    - id: color
      type: UnityEngine.Color
      description: The color to add.
    content.vb: Public Sub AddColorX4(item As BaseItem, ByRef color As Color)
  overload: Global.DebugDrawMesh.AddColorX4*
  nameWithType.vb: DebugDrawMesh.AddColorX4(BaseItem, ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddColorX4(DebugDrawItems.BaseItem, ByRef UnityEngine.Color)
  name.vb: AddColorX4(BaseItem, ByRef Color)
- uid: Global.DebugDrawMesh.AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@)
  id: AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddColors(BaseItem, ref Color, ref Color)
  nameWithType: DebugDrawMesh.AddColors(BaseItem, ref Color, ref Color)
  fullName: DebugDrawMesh.AddColors(DebugDrawItems.BaseItem, ref UnityEngine.Color, ref UnityEngine.Color)
  type: Method
  source:
    id: AddColors
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 645
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds two colors.\n"
  example: []
  syntax:
    content: public void AddColors(BaseItem item, ref Color color1, ref Color color2)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item with which the color will be multiplied.
    - id: color1
      type: UnityEngine.Color
      description: ''
    - id: color2
      type: UnityEngine.Color
      description: ''
    content.vb: Public Sub AddColors(item As BaseItem, ByRef color1 As Color, ByRef color2 As Color)
  overload: Global.DebugDrawMesh.AddColors*
  nameWithType.vb: DebugDrawMesh.AddColors(BaseItem, ByRef Color, ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddColors(DebugDrawItems.BaseItem, ByRef UnityEngine.Color, ByRef UnityEngine.Color)
  name.vb: AddColors(BaseItem, ByRef Color, ByRef Color)
- uid: Global.DebugDrawMesh.AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@)
  id: AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddColors(BaseItem, ref Color, ref Color, ref Color)
  nameWithType: DebugDrawMesh.AddColors(BaseItem, ref Color, ref Color, ref Color)
  fullName: DebugDrawMesh.AddColors(DebugDrawItems.BaseItem, ref UnityEngine.Color, ref UnityEngine.Color, ref UnityEngine.Color)
  type: Method
  source:
    id: AddColors
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 667
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds three colors.\n"
  example: []
  syntax:
    content: public void AddColors(BaseItem item, ref Color color1, ref Color color2, ref Color color3)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item with which the color will be multiplied.
    - id: color1
      type: UnityEngine.Color
      description: ''
    - id: color2
      type: UnityEngine.Color
      description: ''
    - id: color3
      type: UnityEngine.Color
      description: ''
    content.vb: Public Sub AddColors(item As BaseItem, ByRef color1 As Color, ByRef color2 As Color, ByRef color3 As Color)
  overload: Global.DebugDrawMesh.AddColors*
  nameWithType.vb: DebugDrawMesh.AddColors(BaseItem, ByRef Color, ByRef Color, ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddColors(DebugDrawItems.BaseItem, ByRef UnityEngine.Color, ByRef UnityEngine.Color, ByRef UnityEngine.Color)
  name.vb: AddColors(BaseItem, ByRef Color, ByRef Color, ByRef Color)
- uid: Global.DebugDrawMesh.AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@)
  id: AddColors(DebugDrawItems.BaseItem,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@,UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddColors(BaseItem, ref Color, ref Color, ref Color, ref Color)
  nameWithType: DebugDrawMesh.AddColors(BaseItem, ref Color, ref Color, ref Color, ref Color)
  fullName: DebugDrawMesh.AddColors(DebugDrawItems.BaseItem, ref UnityEngine.Color, ref UnityEngine.Color, ref UnityEngine.Color, ref UnityEngine.Color)
  type: Method
  source:
    id: AddColors
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 692
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds four colors.\n"
  example: []
  syntax:
    content: public void AddColors(BaseItem item, ref Color color1, ref Color color2, ref Color color3, ref Color color4)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item with which the color will be multiplied.
    - id: color1
      type: UnityEngine.Color
      description: ''
    - id: color2
      type: UnityEngine.Color
      description: ''
    - id: color3
      type: UnityEngine.Color
      description: ''
    - id: color4
      type: UnityEngine.Color
      description: ''
    content.vb: Public Sub AddColors(item As BaseItem, ByRef color1 As Color, ByRef color2 As Color, ByRef color3 As Color, ByRef color4 As Color)
  overload: Global.DebugDrawMesh.AddColors*
  nameWithType.vb: DebugDrawMesh.AddColors(BaseItem, ByRef Color, ByRef Color, ByRef Color, ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddColors(DebugDrawItems.BaseItem, ByRef UnityEngine.Color, ByRef UnityEngine.Color, ByRef UnityEngine.Color, ByRef UnityEngine.Color)
  name.vb: AddColors(BaseItem, ByRef Color, ByRef Color, ByRef Color, ByRef Color)
- uid: Global.DebugDrawMesh.AddVertex(UnityEngine.Vector3@)
  commentId: M:Global.DebugDrawMesh.AddVertex(UnityEngine.Vector3@)
  id: AddVertex(UnityEngine.Vector3@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddVertex(ref Vector3)
  nameWithType: DebugDrawMesh.AddVertex(ref Vector3)
  fullName: DebugDrawMesh.AddVertex(ref UnityEngine.Vector3)
  type: Method
  source:
    id: AddVertex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 718
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds a vertex\n"
  example: []
  syntax:
    content: public void AddVertex(ref Vector3 vertex)
    parameters:
    - id: vertex
      type: UnityEngine.Vector3
      description: The vertex to add.
    content.vb: Public Sub AddVertex(ByRef vertex As Vector3)
  overload: Global.DebugDrawMesh.AddVertex*
  nameWithType.vb: DebugDrawMesh.AddVertex(ByRef Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddVertex(ByRef UnityEngine.Vector3)
  name.vb: AddVertex(ByRef Vector3)
- uid: Global.DebugDrawMesh.AddVertex(System.Single,System.Single,System.Single)
  commentId: M:Global.DebugDrawMesh.AddVertex(System.Single,System.Single,System.Single)
  id: AddVertex(System.Single,System.Single,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddVertex(Single, Single, Single)
  nameWithType: DebugDrawMesh.AddVertex(Single, Single, Single)
  fullName: DebugDrawMesh.AddVertex(System.Single, System.Single, System.Single)
  type: Method
  source:
    id: AddVertex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 730
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds a vertex\n"
  example: []
  syntax:
    content: public void AddVertex(float x, float y, float z)
    parameters:
    - id: x
      type: System.Single
      description: The x value of the vertex to add.
    - id: y
      type: System.Single
      description: The y value of the vertex to add.
    - id: z
      type: System.Single
      description: The z value of the vertex to add.
    content.vb: Public Sub AddVertex(x As Single, y As Single, z As Single)
  overload: Global.DebugDrawMesh.AddVertex*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddVertex(System.Single,System.Single)
  commentId: M:Global.DebugDrawMesh.AddVertex(System.Single,System.Single)
  id: AddVertex(System.Single,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddVertex(Single, Single)
  nameWithType: DebugDrawMesh.AddVertex(Single, Single)
  fullName: DebugDrawMesh.AddVertex(System.Single, System.Single)
  type: Method
  source:
    id: AddVertex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 741
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds a vertex with z set to 0\n"
  example: []
  syntax:
    content: public void AddVertex(float x, float y)
    parameters:
    - id: x
      type: System.Single
      description: The x value of the vertex to add.
    - id: y
      type: System.Single
      description: The y value of the vertex to add.
    content.vb: Public Sub AddVertex(x As Single, y As Single)
  overload: Global.DebugDrawMesh.AddVertex*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@)
  commentId: M:Global.DebugDrawMesh.AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@)
  id: AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddLine(ref Vector3, ref Vector3)
  nameWithType: DebugDrawMesh.AddLine(ref Vector3, ref Vector3)
  fullName: DebugDrawMesh.AddLine(ref UnityEngine.Vector3, ref UnityEngine.Vector3)
  type: Method
  source:
    id: AddLine
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 752
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds two vertices and indices forming a line\n"
  example: []
  syntax:
    content: public void AddLine(ref Vector3 v1, ref Vector3 v2)
    parameters:
    - id: v1
      type: UnityEngine.Vector3
      description: The line start point.
    - id: v2
      type: UnityEngine.Vector3
      description: The line end point.
    content.vb: Public Sub AddLine(ByRef v1 As Vector3, ByRef v2 As Vector3)
  overload: Global.DebugDrawMesh.AddLine*
  nameWithType.vb: DebugDrawMesh.AddLine(ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddLine(ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3)
  name.vb: AddLine(ByRef Vector3, ByRef Vector3)
- uid: Global.DebugDrawMesh.AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@)
  id: AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddLine(ref Vector3, ref Vector3, ref Color)
  nameWithType: DebugDrawMesh.AddLine(ref Vector3, ref Vector3, ref Color)
  fullName: DebugDrawMesh.AddLine(ref UnityEngine.Vector3, ref UnityEngine.Vector3, ref UnityEngine.Color)
  type: Method
  source:
    id: AddLine
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 767
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds two vertices, colors and indices forming a line\n"
  example: []
  syntax:
    content: public void AddLine(ref Vector3 v1, ref Vector3 v2, ref Color clr)
    parameters:
    - id: v1
      type: UnityEngine.Vector3
      description: The line start point.
    - id: v2
      type: UnityEngine.Vector3
      description: The line end point.
    - id: clr
      type: UnityEngine.Color
      description: The line color.
    content.vb: Public Sub AddLine(ByRef v1 As Vector3, ByRef v2 As Vector3, ByRef clr As Color)
  overload: Global.DebugDrawMesh.AddLine*
  nameWithType.vb: DebugDrawMesh.AddLine(ByRef Vector3, ByRef Vector3, ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddLine(ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3, ByRef UnityEngine.Color)
  name.vb: AddLine(ByRef Vector3, ByRef Vector3, ByRef Color)
- uid: Global.DebugDrawMesh.AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  id: AddLine(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddLine(ref Vector3, ref Vector3, ref Color, ref Color)
  nameWithType: DebugDrawMesh.AddLine(ref Vector3, ref Vector3, ref Color, ref Color)
  fullName: DebugDrawMesh.AddLine(ref UnityEngine.Vector3, ref UnityEngine.Vector3, ref UnityEngine.Color, ref UnityEngine.Color)
  type: Method
  source:
    id: AddLine
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 785
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds two vertices, colors, and indices forming a line\n"
  example: []
  syntax:
    content: public void AddLine(ref Vector3 v1, ref Vector3 v2, ref Color clr1, ref Color clr2)
    parameters:
    - id: v1
      type: UnityEngine.Vector3
      description: The line start point.
    - id: v2
      type: UnityEngine.Vector3
      description: The line end point.
    - id: clr1
      type: UnityEngine.Color
      description: The line color at the start point.
    - id: clr2
      type: UnityEngine.Color
      description: The line color at the end point.
    content.vb: Public Sub AddLine(ByRef v1 As Vector3, ByRef v2 As Vector3, ByRef clr1 As Color, ByRef clr2 As Color)
  overload: Global.DebugDrawMesh.AddLine*
  nameWithType.vb: DebugDrawMesh.AddLine(ByRef Vector3, ByRef Vector3, ByRef Color, ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddLine(ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3, ByRef UnityEngine.Color, ByRef UnityEngine.Color)
  name.vb: AddLine(ByRef Vector3, ByRef Vector3, ByRef Color, ByRef Color)
- uid: Global.DebugDrawMesh.AddVertex(UnityEngine.Matrix4x4@,UnityEngine.Vector3@)
  commentId: M:Global.DebugDrawMesh.AddVertex(UnityEngine.Matrix4x4@,UnityEngine.Vector3@)
  id: AddVertex(UnityEngine.Matrix4x4@,UnityEngine.Vector3@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddVertex(ref Matrix4x4, ref Vector3)
  nameWithType: DebugDrawMesh.AddVertex(ref Matrix4x4, ref Vector3)
  fullName: DebugDrawMesh.AddVertex(ref UnityEngine.Matrix4x4, ref UnityEngine.Vector3)
  type: Method
  source:
    id: AddVertex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 804
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nTransforms and adds a vertex.\n"
  example: []
  syntax:
    content: public void AddVertex(ref Matrix4x4 m, ref Vector3 vertex)
    parameters:
    - id: m
      type: UnityEngine.Matrix4x4
      description: The matrix to transform the vertex by.
    - id: vertex
      type: UnityEngine.Vector3
      description: The vertex to add.
    content.vb: Public Sub AddVertex(ByRef m As Matrix4x4, ByRef vertex As Vector3)
  overload: Global.DebugDrawMesh.AddVertex*
  nameWithType.vb: DebugDrawMesh.AddVertex(ByRef Matrix4x4, ByRef Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddVertex(ByRef UnityEngine.Matrix4x4, ByRef UnityEngine.Vector3)
  name.vb: AddVertex(ByRef Matrix4x4, ByRef Vector3)
- uid: Global.DebugDrawMesh.AddVertex(UnityEngine.Matrix4x4@,System.Single,System.Single,System.Single)
  commentId: M:Global.DebugDrawMesh.AddVertex(UnityEngine.Matrix4x4@,System.Single,System.Single,System.Single)
  id: AddVertex(UnityEngine.Matrix4x4@,System.Single,System.Single,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddVertex(ref Matrix4x4, Single, Single, Single)
  nameWithType: DebugDrawMesh.AddVertex(ref Matrix4x4, Single, Single, Single)
  fullName: DebugDrawMesh.AddVertex(ref UnityEngine.Matrix4x4, System.Single, System.Single, System.Single)
  type: Method
  source:
    id: AddVertex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 817
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nTransforms and adds a vertex.\n"
  example: []
  syntax:
    content: public void AddVertex(ref Matrix4x4 m, float x, float y, float z)
    parameters:
    - id: m
      type: UnityEngine.Matrix4x4
      description: The matrix to transform the vertex by.
    - id: x
      type: System.Single
      description: The x value of the vertex to add.
    - id: y
      type: System.Single
      description: The y value of the vertex to add.
    - id: z
      type: System.Single
      description: The z value of the vertex to add.
    content.vb: Public Sub AddVertex(ByRef m As Matrix4x4, x As Single, y As Single, z As Single)
  overload: Global.DebugDrawMesh.AddVertex*
  nameWithType.vb: DebugDrawMesh.AddVertex(ByRef Matrix4x4, Single, Single, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddVertex(ByRef UnityEngine.Matrix4x4, System.Single, System.Single, System.Single)
  name.vb: AddVertex(ByRef Matrix4x4, Single, Single, Single)
- uid: Global.DebugDrawMesh.AddVertex(UnityEngine.Matrix4x4@,System.Single,System.Single)
  commentId: M:Global.DebugDrawMesh.AddVertex(UnityEngine.Matrix4x4@,System.Single,System.Single)
  id: AddVertex(UnityEngine.Matrix4x4@,System.Single,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddVertex(ref Matrix4x4, Single, Single)
  nameWithType: DebugDrawMesh.AddVertex(ref Matrix4x4, Single, Single)
  fullName: DebugDrawMesh.AddVertex(ref UnityEngine.Matrix4x4, System.Single, System.Single)
  type: Method
  source:
    id: AddVertex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 829
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nTransforms and adds a vertex with z set to 0.\n"
  example: []
  syntax:
    content: public void AddVertex(ref Matrix4x4 m, float x, float y)
    parameters:
    - id: m
      type: UnityEngine.Matrix4x4
      description: The matrix to transform the vertex by.
    - id: x
      type: System.Single
      description: The x value of the vertex to add.
    - id: y
      type: System.Single
      description: The y value of the vertex to add.
    content.vb: Public Sub AddVertex(ByRef m As Matrix4x4, x As Single, y As Single)
  overload: Global.DebugDrawMesh.AddVertex*
  nameWithType.vb: DebugDrawMesh.AddVertex(ByRef Matrix4x4, Single, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddVertex(ByRef UnityEngine.Matrix4x4, System.Single, System.Single)
  name.vb: AddVertex(ByRef Matrix4x4, Single, Single)
- uid: Global.DebugDrawMesh.AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  commentId: M:Global.DebugDrawMesh.AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  id: AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddLine(ref Matrix4x4, ref Vector3, ref Vector3)
  nameWithType: DebugDrawMesh.AddLine(ref Matrix4x4, ref Vector3, ref Vector3)
  fullName: DebugDrawMesh.AddLine(ref UnityEngine.Matrix4x4, ref UnityEngine.Vector3, ref UnityEngine.Vector3)
  type: Method
  source:
    id: AddLine
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 841
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds two vertices and indices forming a line\n"
  example: []
  syntax:
    content: public void AddLine(ref Matrix4x4 m, ref Vector3 v1, ref Vector3 v2)
    parameters:
    - id: m
      type: UnityEngine.Matrix4x4
      description: The matrix to transform the vertices by.
    - id: v1
      type: UnityEngine.Vector3
      description: The line start point.
    - id: v2
      type: UnityEngine.Vector3
      description: The line end point.
    content.vb: Public Sub AddLine(ByRef m As Matrix4x4, ByRef v1 As Vector3, ByRef v2 As Vector3)
  overload: Global.DebugDrawMesh.AddLine*
  nameWithType.vb: DebugDrawMesh.AddLine(ByRef Matrix4x4, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddLine(ByRef UnityEngine.Matrix4x4, ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3)
  name.vb: AddLine(ByRef Matrix4x4, ByRef Vector3, ByRef Vector3)
- uid: Global.DebugDrawMesh.AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color)
  commentId: M:Global.DebugDrawMesh.AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color)
  id: AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddLine(ref Matrix4x4, ref Vector3, ref Vector3, Color)
  nameWithType: DebugDrawMesh.AddLine(ref Matrix4x4, ref Vector3, ref Vector3, Color)
  fullName: DebugDrawMesh.AddLine(ref UnityEngine.Matrix4x4, ref UnityEngine.Vector3, ref UnityEngine.Vector3, UnityEngine.Color)
  type: Method
  source:
    id: AddLine
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 857
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds and transforms two vertices, color and indices forming a line\n"
  example: []
  syntax:
    content: public void AddLine(ref Matrix4x4 m, ref Vector3 v1, ref Vector3 v2, Color clr)
    parameters:
    - id: m
      type: UnityEngine.Matrix4x4
      description: The matrix to transform the vertices by.
    - id: v1
      type: UnityEngine.Vector3
      description: The line start point.
    - id: v2
      type: UnityEngine.Vector3
      description: The line end point.
    - id: clr
      type: UnityEngine.Color
      description: The line color.
    content.vb: Public Sub AddLine(ByRef m As Matrix4x4, ByRef v1 As Vector3, ByRef v2 As Vector3, clr As Color)
  overload: Global.DebugDrawMesh.AddLine*
  nameWithType.vb: DebugDrawMesh.AddLine(ByRef Matrix4x4, ByRef Vector3, ByRef Vector3, Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddLine(ByRef UnityEngine.Matrix4x4, ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3, UnityEngine.Color)
  name.vb: AddLine(ByRef Matrix4x4, ByRef Vector3, ByRef Vector3, Color)
- uid: Global.DebugDrawMesh.AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  id: AddLine(UnityEngine.Matrix4x4@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddLine(ref Matrix4x4, ref Vector3, ref Vector3, ref Color, ref Color)
  nameWithType: DebugDrawMesh.AddLine(ref Matrix4x4, ref Vector3, ref Vector3, ref Color, ref Color)
  fullName: DebugDrawMesh.AddLine(ref UnityEngine.Matrix4x4, ref UnityEngine.Vector3, ref UnityEngine.Vector3, ref UnityEngine.Color, ref UnityEngine.Color)
  type: Method
  source:
    id: AddLine
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 876
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds and transforms two vertices, colors, and indices forming a line\n"
  example: []
  syntax:
    content: public void AddLine(ref Matrix4x4 m, ref Vector3 v1, ref Vector3 v2, ref Color clr1, ref Color clr2)
    parameters:
    - id: m
      type: UnityEngine.Matrix4x4
      description: The matrix to transform the vertices by.
    - id: v1
      type: UnityEngine.Vector3
      description: The line start point.
    - id: v2
      type: UnityEngine.Vector3
      description: The line end point.
    - id: clr1
      type: UnityEngine.Color
      description: The line color at the start point.
    - id: clr2
      type: UnityEngine.Color
      description: The line color at the end point.
    content.vb: Public Sub AddLine(ByRef m As Matrix4x4, ByRef v1 As Vector3, ByRef v2 As Vector3, ByRef clr1 As Color, ByRef clr2 As Color)
  overload: Global.DebugDrawMesh.AddLine*
  nameWithType.vb: DebugDrawMesh.AddLine(ByRef Matrix4x4, ByRef Vector3, ByRef Vector3, ByRef Color, ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddLine(ByRef UnityEngine.Matrix4x4, ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3, ByRef UnityEngine.Color, ByRef UnityEngine.Color)
  name.vb: AddLine(ByRef Matrix4x4, ByRef Vector3, ByRef Vector3, ByRef Color, ByRef Color)
- uid: Global.DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem,UnityEngine.Vector3@)
  commentId: M:Global.DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem,UnityEngine.Vector3@)
  id: AddVertex(DebugDrawItems.BaseItem,UnityEngine.Vector3@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddVertex(BaseItem, ref Vector3)
  nameWithType: DebugDrawMesh.AddVertex(BaseItem, ref Vector3)
  fullName: DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem, ref UnityEngine.Vector3)
  type: Method
  source:
    id: AddVertex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 895
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nTransforms and adds a vertex.\n"
  example: []
  syntax:
    content: public void AddVertex(BaseItem item, ref Vector3 vertex)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item whose whose state will be used to transform the vertex.
    - id: vertex
      type: UnityEngine.Vector3
      description: The vertex to add.
    content.vb: Public Sub AddVertex(item As BaseItem, ByRef vertex As Vector3)
  overload: Global.DebugDrawMesh.AddVertex*
  nameWithType.vb: DebugDrawMesh.AddVertex(BaseItem, ByRef Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem, ByRef UnityEngine.Vector3)
  name.vb: AddVertex(BaseItem, ByRef Vector3)
- uid: Global.DebugDrawMesh.AddVertices(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  commentId: M:Global.DebugDrawMesh.AddVertices(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  id: AddVertices(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddVertices(BaseItem, ref Vector3, ref Vector3, ref Vector3)
  nameWithType: DebugDrawMesh.AddVertices(BaseItem, ref Vector3, ref Vector3, ref Vector3)
  fullName: DebugDrawMesh.AddVertices(DebugDrawItems.BaseItem, ref UnityEngine.Vector3, ref UnityEngine.Vector3, ref UnityEngine.Vector3)
  type: Method
  source:
    id: AddVertices
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 908
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nTransforms and adds three vertices.\n"
  example: []
  syntax:
    content: public void AddVertices(BaseItem item, ref Vector3 v1, ref Vector3 v2, ref Vector3 v3)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item whose whose state will be used to transform the vertex.
    - id: v1
      type: UnityEngine.Vector3
      description: ''
    - id: v2
      type: UnityEngine.Vector3
      description: ''
    - id: v3
      type: UnityEngine.Vector3
      description: ''
    content.vb: Public Sub AddVertices(item As BaseItem, ByRef v1 As Vector3, ByRef v2 As Vector3, ByRef v3 As Vector3)
  overload: Global.DebugDrawMesh.AddVertices*
  nameWithType.vb: DebugDrawMesh.AddVertices(BaseItem, ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddVertices(DebugDrawItems.BaseItem, ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3)
  name.vb: AddVertices(BaseItem, ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Global.DebugDrawMesh.AddVertices(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  commentId: M:Global.DebugDrawMesh.AddVertices(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  id: AddVertices(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddVertices(BaseItem, ref Vector3, ref Vector3, ref Vector3, ref Vector3)
  nameWithType: DebugDrawMesh.AddVertices(BaseItem, ref Vector3, ref Vector3, ref Vector3, ref Vector3)
  fullName: DebugDrawMesh.AddVertices(DebugDrawItems.BaseItem, ref UnityEngine.Vector3, ref UnityEngine.Vector3, ref UnityEngine.Vector3, ref UnityEngine.Vector3)
  type: Method
  source:
    id: AddVertices
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 933
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nTransforms and adds four vertices.\n"
  example: []
  syntax:
    content: public void AddVertices(BaseItem item, ref Vector3 v1, ref Vector3 v2, ref Vector3 v3, ref Vector3 v4)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item whose whose state will be used to transform the vertex.
    - id: v1
      type: UnityEngine.Vector3
      description: ''
    - id: v2
      type: UnityEngine.Vector3
      description: ''
    - id: v3
      type: UnityEngine.Vector3
      description: ''
    - id: v4
      type: UnityEngine.Vector3
      description: ''
    content.vb: Public Sub AddVertices(item As BaseItem, ByRef v1 As Vector3, ByRef v2 As Vector3, ByRef v3 As Vector3, ByRef v4 As Vector3)
  overload: Global.DebugDrawMesh.AddVertices*
  nameWithType.vb: DebugDrawMesh.AddVertices(BaseItem, ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddVertices(DebugDrawItems.BaseItem, ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3)
  name.vb: AddVertices(BaseItem, ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Global.DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem,System.Single,System.Single,System.Single)
  commentId: M:Global.DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem,System.Single,System.Single,System.Single)
  id: AddVertex(DebugDrawItems.BaseItem,System.Single,System.Single,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddVertex(BaseItem, Single, Single, Single)
  nameWithType: DebugDrawMesh.AddVertex(BaseItem, Single, Single, Single)
  fullName: DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem, System.Single, System.Single, System.Single)
  type: Method
  source:
    id: AddVertex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 959
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nTransforms and adds a vertex.\n"
  example: []
  syntax:
    content: public void AddVertex(BaseItem item, float x, float y, float z)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item whose whose state will be used to transform the vertex.
    - id: x
      type: System.Single
      description: The x value of the vertex to add.
    - id: y
      type: System.Single
      description: The y value of the vertex to add.
    - id: z
      type: System.Single
      description: The z value of the vertex to add.
    content.vb: Public Sub AddVertex(item As BaseItem, x As Single, y As Single, z As Single)
  overload: Global.DebugDrawMesh.AddVertex*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem,System.Single,System.Single)
  commentId: M:Global.DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem,System.Single,System.Single)
  id: AddVertex(DebugDrawItems.BaseItem,System.Single,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddVertex(BaseItem, Single, Single)
  nameWithType: DebugDrawMesh.AddVertex(BaseItem, Single, Single)
  fullName: DebugDrawMesh.AddVertex(DebugDrawItems.BaseItem, System.Single, System.Single)
  type: Method
  source:
    id: AddVertex
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 973
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nTransforms and adds a vertex with z set to 0.\n"
  example: []
  syntax:
    content: public void AddVertex(BaseItem item, float x, float y)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item whose whose state will be used to transform the vertex.
    - id: x
      type: System.Single
      description: The x value of the vertex to add.
    - id: y
      type: System.Single
      description: The y value of the vertex to add.
    content.vb: Public Sub AddVertex(item As BaseItem, x As Single, y As Single)
  overload: Global.DebugDrawMesh.AddVertex*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@)
  commentId: M:Global.DebugDrawMesh.AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@)
  id: AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddLine(BaseItem, ref Vector3, ref Vector3)
  nameWithType: DebugDrawMesh.AddLine(BaseItem, ref Vector3, ref Vector3)
  fullName: DebugDrawMesh.AddLine(DebugDrawItems.BaseItem, ref UnityEngine.Vector3, ref UnityEngine.Vector3)
  type: Method
  source:
    id: AddLine
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 987
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds two vertices and indices forming a line\n"
  example: []
  syntax:
    content: public void AddLine(BaseItem item, ref Vector3 v1, ref Vector3 v2)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item whose whose state will be used to transform the vertex.
    - id: v1
      type: UnityEngine.Vector3
      description: The line start point.
    - id: v2
      type: UnityEngine.Vector3
      description: The line end point.
    content.vb: Public Sub AddLine(item As BaseItem, ByRef v1 As Vector3, ByRef v2 As Vector3)
  overload: Global.DebugDrawMesh.AddLine*
  nameWithType.vb: DebugDrawMesh.AddLine(BaseItem, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddLine(DebugDrawItems.BaseItem, ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3)
  name.vb: AddLine(BaseItem, ByRef Vector3, ByRef Vector3)
- uid: Global.DebugDrawMesh.AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color)
  commentId: M:Global.DebugDrawMesh.AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color)
  id: AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddLine(BaseItem, ref Vector3, ref Vector3, Color)
  nameWithType: DebugDrawMesh.AddLine(BaseItem, ref Vector3, ref Vector3, Color)
  fullName: DebugDrawMesh.AddLine(DebugDrawItems.BaseItem, ref UnityEngine.Vector3, ref UnityEngine.Vector3, UnityEngine.Color)
  type: Method
  source:
    id: AddLine
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 1003
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds and transforms two vertices, color and indices forming a line\n"
  example: []
  syntax:
    content: public void AddLine(BaseItem item, ref Vector3 v1, ref Vector3 v2, Color clr)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item whose whose state will be used to transform the vertex.
    - id: v1
      type: UnityEngine.Vector3
      description: The line start point.
    - id: v2
      type: UnityEngine.Vector3
      description: The line end point.
    - id: clr
      type: UnityEngine.Color
      description: The line color.
    content.vb: Public Sub AddLine(item As BaseItem, ByRef v1 As Vector3, ByRef v2 As Vector3, clr As Color)
  overload: Global.DebugDrawMesh.AddLine*
  nameWithType.vb: DebugDrawMesh.AddLine(BaseItem, ByRef Vector3, ByRef Vector3, Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddLine(DebugDrawItems.BaseItem, ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3, UnityEngine.Color)
  name.vb: AddLine(BaseItem, ByRef Vector3, ByRef Vector3, Color)
- uid: Global.DebugDrawMesh.AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  commentId: M:Global.DebugDrawMesh.AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  id: AddLine(DebugDrawItems.BaseItem,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Color@,UnityEngine.Color@)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddLine(BaseItem, ref Vector3, ref Vector3, ref Color, ref Color)
  nameWithType: DebugDrawMesh.AddLine(BaseItem, ref Vector3, ref Vector3, ref Color, ref Color)
  fullName: DebugDrawMesh.AddLine(DebugDrawItems.BaseItem, ref UnityEngine.Vector3, ref UnityEngine.Vector3, ref UnityEngine.Color, ref UnityEngine.Color)
  type: Method
  source:
    id: AddLine
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 1022
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds and transforms two vertices, colors, and indices forming a line\n"
  example: []
  syntax:
    content: public void AddLine(BaseItem item, ref Vector3 v1, ref Vector3 v2, ref Color clr1, ref Color clr2)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item whose whose state will be used to transform the vertex.
    - id: v1
      type: UnityEngine.Vector3
      description: The line start point.
    - id: v2
      type: UnityEngine.Vector3
      description: The line end point.
    - id: clr1
      type: UnityEngine.Color
      description: The line color at the start point.
    - id: clr2
      type: UnityEngine.Color
      description: The line color at the end point.
    content.vb: Public Sub AddLine(item As BaseItem, ByRef v1 As Vector3, ByRef v2 As Vector3, ByRef clr1 As Color, ByRef clr2 As Color)
  overload: Global.DebugDrawMesh.AddLine*
  nameWithType.vb: DebugDrawMesh.AddLine(BaseItem, ByRef Vector3, ByRef Vector3, ByRef Color, ByRef Color)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddLine(DebugDrawItems.BaseItem, ByRef UnityEngine.Vector3, ByRef UnityEngine.Vector3, ByRef UnityEngine.Color, ByRef UnityEngine.Color)
  name.vb: AddLine(BaseItem, ByRef Vector3, ByRef Vector3, ByRef Color, ByRef Color)
- uid: Global.DebugDrawMesh.AddLines(DebugDrawItems.BaseItem,System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color})
  commentId: M:Global.DebugDrawMesh.AddLines(DebugDrawItems.BaseItem,System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color})
  id: AddLines(DebugDrawItems.BaseItem,System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color})
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddLines(BaseItem, List<Vector3>, List<Color>)
  nameWithType: DebugDrawMesh.AddLines(BaseItem, List<Vector3>, List<Color>)
  fullName: DebugDrawMesh.AddLines(DebugDrawItems.BaseItem, System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<UnityEngine.Color>)
  type: Method
  source:
    id: AddLines
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 1039
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds and transforms a list of vertices and colors forming a series of lines.\n"
  example: []
  syntax:
    content: public void AddLines(BaseItem item, List<Vector3> positions, List<Color> colors)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item whose whose state will be used to transform the vertex.
    - id: positions
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: The positions of the start and end points of each line.
    - id: colors
      type: System.Collections.Generic.List{UnityEngine.Color}
      description: The colors of the start and end points of each line.
    content.vb: Public Sub AddLines(item As BaseItem, positions As List(Of Vector3), colors As List(Of Color))
  overload: Global.DebugDrawMesh.AddLines*
  nameWithType.vb: DebugDrawMesh.AddLines(BaseItem, List(Of Vector3), List(Of Color))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddLines(DebugDrawItems.BaseItem, System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of UnityEngine.Color))
  name.vb: AddLines(BaseItem, List(Of Vector3), List(Of Color))
- uid: Global.DebugDrawMesh.AddPoints(DebugDrawItems.BaseItem,System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color})
  commentId: M:Global.DebugDrawMesh.AddPoints(DebugDrawItems.BaseItem,System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color})
  id: AddPoints(DebugDrawItems.BaseItem,System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color})
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: AddPoints(BaseItem, List<Vector3>, List<Color>)
  nameWithType: DebugDrawMesh.AddPoints(BaseItem, List<Vector3>, List<Color>)
  fullName: DebugDrawMesh.AddPoints(DebugDrawItems.BaseItem, System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<UnityEngine.Color>)
  type: Method
  source:
    id: AddPoints
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMesh.cs
    startLine: 1078
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nAdds and transforms a list of vertices and colors forming a series of points.\n"
  example: []
  syntax:
    content: public void AddPoints(BaseItem item, List<Vector3> positions, List<Color> colors)
    parameters:
    - id: item
      type: DebugDrawItems.BaseItem
      description: The item whose whose state will be used to transform the vertex.
    - id: positions
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: The positions of the start and end points of each line.
    - id: colors
      type: System.Collections.Generic.List{UnityEngine.Color}
      description: The colors of the start and end points of each line.
    content.vb: Public Sub AddPoints(item As BaseItem, positions As List(Of Vector3), colors As List(Of Color))
  overload: Global.DebugDrawMesh.AddPoints*
  nameWithType.vb: DebugDrawMesh.AddPoints(BaseItem, List(Of Vector3), List(Of Color))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.AddPoints(DebugDrawItems.BaseItem, System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of UnityEngine.Color))
  name.vb: AddPoints(BaseItem, List(Of Vector3), List(Of Color))
- uid: Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Single,DebugDrawItems.ArrowShape,DebugDrawItems.ArrowShape,System.Boolean,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Single,DebugDrawItems.ArrowShape,DebugDrawItems.ArrowShape,System.Boolean,System.Boolean,System.Single)
  id: Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Single,DebugDrawItems.ArrowShape,DebugDrawItems.ArrowShape,System.Boolean,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Arrow(Vector3, Vector3, Color, Color, Single, Single, ArrowShape, ArrowShape, Boolean, Boolean, Single)
  nameWithType: DebugDrawMesh.Arrow(Vector3, Vector3, Color, Color, Single, Single, ArrowShape, ArrowShape, Boolean, Boolean, Single)
  fullName: DebugDrawMesh.Arrow(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, UnityEngine.Color, System.Single, System.Single, DebugDrawItems.ArrowShape, DebugDrawItems.ArrowShape, System.Boolean, System.Boolean, System.Single)
  type: Method
  source:
    id: Arrow
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1488
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws an arrow.\n"
  example: []
  syntax:
    content: public Arrow Arrow(Vector3 p1, Vector3 p2, Color color1, Color color2, float startSize, float endSize, ArrowShape startShape = ArrowShape.Arrow, ArrowShape endShape = ArrowShape.Arrow, bool faceCamera = false, bool autoSize = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start of the line.
    - id: p2
      type: UnityEngine.Vector3
      description: The end of the line.
    - id: color1
      type: UnityEngine.Color
      description: The line&apos;s colour at the start.
    - id: color2
      type: UnityEngine.Color
      description: The line&apos;s colour at the end.
    - id: startSize
      type: System.Single
      description: The size of the arrow head at the start of the line.
    - id: endSize
      type: System.Single
      description: The size of the arrow head at the end of the line.
    - id: startShape
      type: DebugDrawItems.ArrowShape
      description: The shape of the head at the start of the line.
    - id: endShape
      type: DebugDrawItems.ArrowShape
      description: The shape of the head at the end of the line.
    - id: faceCamera
      type: System.Boolean
      description: If true the arrow heads will automatically orient themselves to be perpendicular to the camera.
    - id: autoSize
      type: System.Boolean
      description: If true adjusts the size of the arrow heads so it approximately remains the same size on screen.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Arrow
      description: The Arrow object.
    content.vb: Public Function Arrow(p1 As Vector3, p2 As Vector3, color1 As Color, color2 As Color, startSize As Single, endSize As Single, startShape As ArrowShape = ArrowShape.Arrow, endShape As ArrowShape = ArrowShape.Arrow, faceCamera As Boolean = False, autoSize As Boolean = False, duration As Single = 0F) As Arrow
  overload: Global.DebugDrawMesh.Arrow*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)
  id: Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Arrow(Vector3, Vector3, Color, Color, Single, Single, Boolean, Boolean, Single)
  nameWithType: DebugDrawMesh.Arrow(Vector3, Vector3, Color, Color, Single, Single, Boolean, Boolean, Single)
  fullName: DebugDrawMesh.Arrow(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, UnityEngine.Color, System.Single, System.Single, System.Boolean, System.Boolean, System.Single)
  type: Method
  source:
    id: Arrow
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1507
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws an arrow.\n"
  example: []
  syntax:
    content: public Arrow Arrow(Vector3 p1, Vector3 p2, Color color1, Color color2, float startSize, float endSize, bool faceCamera = false, bool autoSize = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start of the line.
    - id: p2
      type: UnityEngine.Vector3
      description: The end of the line.
    - id: color1
      type: UnityEngine.Color
      description: The line&apos;s colour at the start.
    - id: color2
      type: UnityEngine.Color
      description: The line&apos;s colour at the end.
    - id: startSize
      type: System.Single
      description: The size of the arrow head at the start of the line.
    - id: endSize
      type: System.Single
      description: The size of the arrow head at the end of the line.
    - id: faceCamera
      type: System.Boolean
      description: If true the arrow heads will automatically orient themselves to be perpendicular to the camera.
    - id: autoSize
      type: System.Boolean
      description: If true adjusts the size of the arrow heads so it approximately remains the same size on screen.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Arrow
      description: The Arrow object.
    content.vb: Public Function Arrow(p1 As Vector3, p2 As Vector3, color1 As Color, color2 As Color, startSize As Single, endSize As Single, faceCamera As Boolean = False, autoSize As Boolean = False, duration As Single = 0F) As Arrow
  overload: Global.DebugDrawMesh.Arrow*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Boolean,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Boolean,System.Boolean,System.Single)
  id: Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,System.Boolean,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Arrow(Vector3, Vector3, Color, Color, Single, Boolean, Boolean, Single)
  nameWithType: DebugDrawMesh.Arrow(Vector3, Vector3, Color, Color, Single, Boolean, Boolean, Single)
  fullName: DebugDrawMesh.Arrow(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, UnityEngine.Color, System.Single, System.Boolean, System.Boolean, System.Single)
  type: Method
  source:
    id: Arrow
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1525
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws an arrow.\n"
  example: []
  syntax:
    content: public Arrow Arrow(Vector3 p1, Vector3 p2, Color color1, Color color2, float size, bool faceCamera = false, bool autoSize = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start of the line.
    - id: p2
      type: UnityEngine.Vector3
      description: The end of the line.
    - id: color1
      type: UnityEngine.Color
      description: The line&apos;s colour at the start.
    - id: color2
      type: UnityEngine.Color
      description: The line&apos;s colour at the end.
    - id: size
      type: System.Single
      description: The size of the arrow head.
    - id: faceCamera
      type: System.Boolean
      description: If true the arrow heads will automatically orient themselves to be perpendicular to the camera.
    - id: autoSize
      type: System.Boolean
      description: If true adjusts the size of the arrow heads so it approximately remains the same size on screen.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Arrow
      description: The Arrow object.
    content.vb: Public Function Arrow(p1 As Vector3, p2 As Vector3, color1 As Color, color2 As Color, size As Single, faceCamera As Boolean = False, autoSize As Boolean = False, duration As Single = 0F) As Arrow
  overload: Global.DebugDrawMesh.Arrow*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)
  id: Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Arrow(Vector3, Vector3, Color, Single, Single, Boolean, Boolean, Single)
  nameWithType: DebugDrawMesh.Arrow(Vector3, Vector3, Color, Single, Single, Boolean, Boolean, Single)
  fullName: DebugDrawMesh.Arrow(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, System.Single, System.Single, System.Boolean, System.Boolean, System.Single)
  type: Method
  source:
    id: Arrow
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1543
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws an arrow.\n"
  example: []
  syntax:
    content: public Arrow Arrow(Vector3 p1, Vector3 p2, Color color, float startSize, float endSize, bool faceCamera = false, bool autoSize = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start of the line.
    - id: p2
      type: UnityEngine.Vector3
      description: The end of the line.
    - id: color
      type: UnityEngine.Color
      description: The arrow&apos;s colour.
    - id: startSize
      type: System.Single
      description: The size of the arrow head at the start of the line.
    - id: endSize
      type: System.Single
      description: The size of the arrow head at the end of the line.
    - id: faceCamera
      type: System.Boolean
      description: If true the arrow heads will automatically orient themselves to be perpendicular to the camera.
    - id: autoSize
      type: System.Boolean
      description: If true adjusts the size of the arrow heads so it approximately remains the same size on screen.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Arrow
      description: The Arrow object.
    content.vb: Public Function Arrow(p1 As Vector3, p2 As Vector3, color As Color, startSize As Single, endSize As Single, faceCamera As Boolean = False, autoSize As Boolean = False, duration As Single = 0F) As Arrow
  overload: Global.DebugDrawMesh.Arrow*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean,System.Boolean,System.Single)
  id: Arrow(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Arrow(Vector3, Vector3, Color, Single, Boolean, Boolean, Single)
  nameWithType: DebugDrawMesh.Arrow(Vector3, Vector3, Color, Single, Boolean, Boolean, Single)
  fullName: DebugDrawMesh.Arrow(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, System.Single, System.Boolean, System.Boolean, System.Single)
  type: Method
  source:
    id: Arrow
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1560
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws an arrow.\n"
  example: []
  syntax:
    content: public Arrow Arrow(Vector3 p1, Vector3 p2, Color color, float size, bool faceCamera = false, bool autoSize = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start of the line.
    - id: p2
      type: UnityEngine.Vector3
      description: The end of the line.
    - id: color
      type: UnityEngine.Color
      description: The arrow&apos;s colour.
    - id: size
      type: System.Single
      description: The size of the arrow head.
    - id: faceCamera
      type: System.Boolean
      description: If true the arrow heads will automatically orient themselves to be perpendicular to the camera.
    - id: autoSize
      type: System.Boolean
      description: If true adjusts the size of the arrow heads so it approximately remains the same size on screen.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Arrow
      description: The Arrow object.
    content.vb: Public Function Arrow(p1 As Vector3, p2 As Vector3, color As Color, size As Single, faceCamera As Boolean = False, autoSize As Boolean = False, duration As Single = 0F) As Arrow
  overload: Global.DebugDrawMesh.Arrow*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Axes(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Axes(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Boolean,System.Single)
  id: Axes(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Axes(Vector3, Quaternion, Vector3, Boolean, Single)
  nameWithType: DebugDrawMesh.Axes(Vector3, Quaternion, Vector3, Boolean, Single)
  fullName: DebugDrawMesh.Axes(UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3, System.Boolean, System.Single)
  type: Method
  source:
    id: Axes
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1575
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws lines along the x, y, and z axes.\n"
  example: []
  syntax:
    content: public Axes Axes(Vector3 position, Quaternion rotation, Vector3 size, bool doubleSided = false, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The axes origin.
    - id: rotation
      type: UnityEngine.Quaternion
      description: The orientation of the axes.
    - id: size
      type: UnityEngine.Vector3
      description: The size of each axis. Set to zero to not draw an axis.
    - id: doubleSided
      type: System.Boolean
      description: If true the axis line extends in both directions, other only in the positive.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Axes
      description: The Axes object.
    content.vb: Public Function Axes(position As Vector3, rotation As Quaternion, size As Vector3, doubleSided As Boolean = False, duration As Single = 0F) As Axes
  overload: Global.DebugDrawMesh.Axes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Axes(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Axes(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Boolean,System.Single)
  id: Axes(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Axes(Vector3, Quaternion, Single, Boolean, Single)
  nameWithType: DebugDrawMesh.Axes(Vector3, Quaternion, Single, Boolean, Single)
  fullName: DebugDrawMesh.Axes(UnityEngine.Vector3, UnityEngine.Quaternion, System.Single, System.Boolean, System.Single)
  type: Method
  source:
    id: Axes
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1590
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws lines along the x, y, and z axes.\n"
  example: []
  syntax:
    content: public Axes Axes(Vector3 position, Quaternion rotation, float size, bool doubleSided = false, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The axes origin.
    - id: rotation
      type: UnityEngine.Quaternion
      description: The orientation of the axes.
    - id: size
      type: System.Single
      description: The size of each the axes.
    - id: doubleSided
      type: System.Boolean
      description: If true the axis line extends in both directions, other only in the positive.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Axes
      description: The Axes object.
    content.vb: Public Function Axes(position As Vector3, rotation As Quaternion, size As Single, doubleSided As Boolean = False, duration As Single = 0F) As Axes
  overload: Global.DebugDrawMesh.Axes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Box(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Box(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)
  id: Box(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Box(Vector3, Single, Color, Single)
  nameWithType: DebugDrawMesh.Box(Vector3, Single, Color, Single)
  fullName: DebugDrawMesh.Box(UnityEngine.Vector3, System.Single, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Box
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1604
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws an axis aligned box.\n"
  example: []
  syntax:
    content: public Box Box(Vector3 position, float size, Color color, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the box.
    - id: size
      type: System.Single
      description: The half size of the box.
    - id: color
      type: UnityEngine.Color
      description: The color of the box.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Box
      description: The Box object.
    content.vb: Public Function Box(position As Vector3, size As Single, color As Color, duration As Single = 0F) As Box
  overload: Global.DebugDrawMesh.Box*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Box(UnityEngine.Vector3,System.Single,UnityEngine.Quaternion,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Box(UnityEngine.Vector3,System.Single,UnityEngine.Quaternion,UnityEngine.Color,System.Single)
  id: Box(UnityEngine.Vector3,System.Single,UnityEngine.Quaternion,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Box(Vector3, Single, Quaternion, Color, Single)
  nameWithType: DebugDrawMesh.Box(Vector3, Single, Quaternion, Color, Single)
  fullName: DebugDrawMesh.Box(UnityEngine.Vector3, System.Single, UnityEngine.Quaternion, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Box
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1619
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws an axis aligned box.\n"
  example: []
  syntax:
    content: public Box Box(Vector3 position, float size, Quaternion orientation, Color color, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the box.
    - id: size
      type: System.Single
      description: The half size of the box.
    - id: orientation
      type: UnityEngine.Quaternion
      description: The orientation of the box.
    - id: color
      type: UnityEngine.Color
      description: The color of the box.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Box
      description: The Box object.
    content.vb: Public Function Box(position As Vector3, size As Single, orientation As Quaternion, color As Color, duration As Single = 0F) As Box
  overload: Global.DebugDrawMesh.Box*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Box(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Box(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: Box(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Box(Vector3, Vector3, Color, Single)
  nameWithType: DebugDrawMesh.Box(Vector3, Vector3, Color, Single)
  fullName: DebugDrawMesh.Box(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Box
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1633
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws an axis aligned box.\n"
  example: []
  syntax:
    content: public Box Box(Vector3 position, Vector3 size, Color color, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the box.
    - id: size
      type: UnityEngine.Vector3
      description: The half size of the box.
    - id: color
      type: UnityEngine.Color
      description: The color of the box.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Box
      description: The Box object.
    content.vb: Public Function Box(position As Vector3, size As Vector3, color As Color, duration As Single = 0F) As Box
  overload: Global.DebugDrawMesh.Box*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Box(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Box(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Single)
  id: Box(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Box(Vector3, Vector3, Quaternion, Color, Single)
  nameWithType: DebugDrawMesh.Box(Vector3, Vector3, Quaternion, Color, Single)
  fullName: DebugDrawMesh.Box(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Box
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1648
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws an axis aligned box.\n"
  example: []
  syntax:
    content: public Box Box(Vector3 position, Vector3 size, Quaternion orientation, Color color, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the box.
    - id: size
      type: UnityEngine.Vector3
      description: The half size of the box.
    - id: orientation
      type: UnityEngine.Quaternion
      description: The orientation of the box.
    - id: color
      type: UnityEngine.Color
      description: The color of the box.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Box
      description: The Box object.
    content.vb: Public Function Box(position As Vector3, size As Vector3, orientation As Quaternion, color As Color, duration As Single = 0F) As Box
  overload: Global.DebugDrawMesh.Box*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Capsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.Capsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  id: Capsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Capsule(Vector3, Vector3, Single, Color, Int32, Single)
  nameWithType: DebugDrawMesh.Capsule(Vector3, Vector3, Single, Color, Int32, Single)
  fullName: DebugDrawMesh.Capsule(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: Capsule
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1664
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a capsule shell.\n"
  example: []
  syntax:
    content: public Capsule Capsule(Vector3 p1, Vector3 p2, float radius, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The center of the capsule at the start of the capsule.
    - id: p2
      type: UnityEngine.Vector3
      description: The center of the capsule at the end of the capsule.
    - id: radius
      type: System.Single
      description: The radius of the capsule.
    - id: color
      type: UnityEngine.Color
      description: The color of the capsule.
    - id: segments
      type: System.Int32
      description: The resolution of the capsule. If set to zero will be adjusted based on the distance to the camera.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Capsule
      description: The Capsule object.
    content.vb: Public Function Capsule(p1 As Vector3, p2 As Vector3, radius As Single, color As Color, segments As Integer = 32, duration As Single = 0F) As Capsule
  overload: Global.DebugDrawMesh.Capsule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.WireCapsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.WireCapsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  id: WireCapsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: WireCapsule(Vector3, Vector3, Single, Color, Int32, Single)
  nameWithType: DebugDrawMesh.WireCapsule(Vector3, Vector3, Single, Color, Int32, Single)
  fullName: DebugDrawMesh.WireCapsule(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: WireCapsule
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1680
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a full wireframe capsule.\n"
  example: []
  syntax:
    content: public Capsule WireCapsule(Vector3 p1, Vector3 p2, float radius, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The center of the capsule at the start of the capsule.
    - id: p2
      type: UnityEngine.Vector3
      description: The center of the capsule at the end of the capsule.
    - id: radius
      type: System.Single
      description: The radius of the capsule.
    - id: color
      type: UnityEngine.Color
      description: The color of the capsule.
    - id: segments
      type: System.Int32
      description: The resolution of the capsule. If set to zero will be adjusted based on the distance to the camera.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Capsule
      description: The Capsule object.
    content.vb: Public Function WireCapsule(p1 As Vector3, p2 As Vector3, radius As Single, color As Color, segments As Integer = 32, duration As Single = 0F) As Capsule
  overload: Global.DebugDrawMesh.WireCapsule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Cone(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Cone(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Boolean,System.Single)
  id: Cone(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Cone(Vector3, Vector3, Single, Single, Color, Int32, Boolean, Boolean, Single)
  nameWithType: DebugDrawMesh.Cone(Vector3, Vector3, Single, Single, Color, Int32, Boolean, Boolean, Single)
  fullName: DebugDrawMesh.Cone(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, System.Single, UnityEngine.Color, System.Int32, System.Boolean, System.Boolean, System.Single)
  type: Method
  source:
    id: Cone
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1701
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a cone shell.\n"
  example: []
  syntax:
    content: public Cone Cone(Vector3 origin, Vector3 direction, float length, float angle, Color color, int segments = 32, bool round = false, bool drawCap = false, float duration = 0F)
    parameters:
    - id: origin
      type: UnityEngine.Vector3
      description: The origin point of the cone.
    - id: direction
      type: UnityEngine.Vector3
      description: The direction the cone.
    - id: length
      type: System.Single
      description: The length of the cone.
    - id: angle
      type: System.Single
      description: The angle of the cone.
    - id: color
      type: UnityEngine.Color
      description: The color of the cone.
    - id: segments
      type: System.Int32
      description: The resolution of the cone. If set to zero will be adjusted based on the distance to the camera.
    - id: round
      type: System.Boolean
      description: >-
        If true, the length is treated as the radius of the cone.

        If false the length is the distance from the origin to the centre of the cones cap.
    - id: drawCap
      type: System.Boolean
      description: >-
        Should a cap be drawn on the cone.

        When round is true the cap will be made up of two arcs, otherwise two perpendicular lines.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Cone
      description: The Cylinder object.
    content.vb: Public Function Cone(origin As Vector3, direction As Vector3, length As Single, angle As Single, color As Color, segments As Integer = 32, round As Boolean = False, drawCap As Boolean = False, duration As Single = 0F) As Cone
  overload: Global.DebugDrawMesh.Cone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.WireCone(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.WireCone(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Boolean,System.Single)
  id: WireCone(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: WireCone(Vector3, Vector3, Single, Single, Color, Int32, Boolean, Boolean, Single)
  nameWithType: DebugDrawMesh.WireCone(Vector3, Vector3, Single, Single, Color, Int32, Boolean, Boolean, Single)
  fullName: DebugDrawMesh.WireCone(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, System.Single, UnityEngine.Color, System.Int32, System.Boolean, System.Boolean, System.Single)
  type: Method
  source:
    id: WireCone
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1722
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a full wireframe cone.\n"
  example: []
  syntax:
    content: public Cone WireCone(Vector3 origin, Vector3 direction, float length, float angle, Color color, int segments = 32, bool round = false, bool drawCap = false, float duration = 0F)
    parameters:
    - id: origin
      type: UnityEngine.Vector3
      description: The origin point of the cone.
    - id: direction
      type: UnityEngine.Vector3
      description: The direction the cone.
    - id: length
      type: System.Single
      description: The length of the cone.
    - id: angle
      type: System.Single
      description: The angle of the cone.
    - id: color
      type: UnityEngine.Color
      description: The color of the cone.
    - id: segments
      type: System.Int32
      description: The resolution of the cone. If set to zero will be adjusted based on the distance to the camera.
    - id: round
      type: System.Boolean
      description: >-
        If true, the length is treated as the radius of the cone.

        If false the length is the distance from the origin to the centre of the cones cap.
    - id: drawCap
      type: System.Boolean
      description: >-
        Should a cap be drawn on the cone.

        When round is true the cap will be made up of two arcs, otherwise two perpendicular lines.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Cone
      description: The Cylinder object.
    content.vb: Public Function WireCone(origin As Vector3, direction As Vector3, length As Single, angle As Single, color As Color, segments As Integer = 32, round As Boolean = False, drawCap As Boolean = False, duration As Single = 0F) As Cone
  overload: Global.DebugDrawMesh.WireCone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  id: Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Cylinder(Vector3, Vector3, Single, Color, Int32, Boolean, Single)
  nameWithType: DebugDrawMesh.Cylinder(Vector3, Vector3, Single, Color, Int32, Boolean, Single)
  fullName: DebugDrawMesh.Cylinder(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, UnityEngine.Color, System.Int32, System.Boolean, System.Single)
  type: Method
  source:
    id: Cylinder
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1739
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a cylinder shell.\n"
  example: []
  syntax:
    content: public Cylinder Cylinder(Vector3 p1, Vector3 p2, float radius, Color color, int segments = 32, bool drawEndAxes = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start point of the cylinder.
    - id: p2
      type: UnityEngine.Vector3
      description: The end point of the cylinder.
    - id: radius
      type: System.Single
      description: The radius of the cylinder.
    - id: color
      type: UnityEngine.Color
      description: The color of the cylinder.
    - id: segments
      type: System.Int32
      description: The resolution of the cylinder. If set to zero will be adjusted based on the distance to the camera.
    - id: drawEndAxes
      type: System.Boolean
      description: Draw axis at each end of the cylinder.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Cylinder
      description: The Cylinder object.
    content.vb: Public Function Cylinder(p1 As Vector3, p2 As Vector3, radius As Single, color As Color, segments As Integer = 32, drawEndAxes As Boolean = False, duration As Single = 0F) As Cylinder
  overload: Global.DebugDrawMesh.Cylinder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  id: Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Cylinder(Vector3, Vector3, Single, Single, Color, Int32, Boolean, Single)
  nameWithType: DebugDrawMesh.Cylinder(Vector3, Vector3, Single, Single, Color, Int32, Boolean, Single)
  fullName: DebugDrawMesh.Cylinder(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, System.Single, UnityEngine.Color, System.Int32, System.Boolean, System.Single)
  type: Method
  source:
    id: Cylinder
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1757
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a cylinder shell with a different start and end radius.\n"
  example: []
  syntax:
    content: public Cylinder Cylinder(Vector3 p1, Vector3 p2, float radius1, float radius2, Color color, int segments = 32, bool drawEndAxes = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start point of the cylinder.
    - id: p2
      type: UnityEngine.Vector3
      description: The end point of the cylinder.
    - id: radius1
      type: System.Single
      description: The radius at the start point of the cylinder.
    - id: radius2
      type: System.Single
      description: The radius at the end point of the cylinder.
    - id: color
      type: UnityEngine.Color
      description: The color of the cylinder.
    - id: segments
      type: System.Int32
      description: The resolution of the cylinder. If set to zero will be adjusted based on the distance to the camera.
    - id: drawEndAxes
      type: System.Boolean
      description: Draw axis at each end of the cylinder.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Cylinder
      description: The Cylinder object.
    content.vb: Public Function Cylinder(p1 As Vector3, p2 As Vector3, radius1 As Single, radius2 As Single, color As Color, segments As Integer = 32, drawEndAxes As Boolean = False, duration As Single = 0F) As Cylinder
  overload: Global.DebugDrawMesh.Cylinder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  id: Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Cylinder(Vector3, Vector3, Vector2, Color, Int32, Boolean, Single)
  nameWithType: DebugDrawMesh.Cylinder(Vector3, Vector3, Vector2, Color, Int32, Boolean, Single)
  fullName: DebugDrawMesh.Cylinder(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Color, System.Int32, System.Boolean, System.Single)
  type: Method
  source:
    id: Cylinder
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1774
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a cylinder shell with a different start and end radius.\n"
  example: []
  syntax:
    content: public Cylinder Cylinder(Vector3 p1, Vector3 p2, Vector2 radius, Color color, int segments = 32, bool drawEndAxes = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start point of the cylinder.
    - id: p2
      type: UnityEngine.Vector3
      description: The end point of the cylinder.
    - id: radius
      type: UnityEngine.Vector2
      description: The radius of the cylinder.
    - id: color
      type: UnityEngine.Color
      description: The color of the cylinder.
    - id: segments
      type: System.Int32
      description: The resolution of the cylinder. If set to zero will be adjusted based on the distance to the camera.
    - id: drawEndAxes
      type: System.Boolean
      description: Draw axis at each end of the cylinder.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Cylinder
      description: The Cylinder object.
    content.vb: Public Function Cylinder(p1 As Vector3, p2 As Vector3, radius As Vector2, color As Color, segments As Integer = 32, drawEndAxes As Boolean = False, duration As Single = 0F) As Cylinder
  overload: Global.DebugDrawMesh.Cylinder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  id: Cylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Cylinder(Vector3, Vector3, Vector2, Vector2, Color, Int32, Boolean, Single)
  nameWithType: DebugDrawMesh.Cylinder(Vector3, Vector3, Vector2, Vector2, Color, Int32, Boolean, Single)
  fullName: DebugDrawMesh.Cylinder(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Color, System.Int32, System.Boolean, System.Single)
  type: Method
  source:
    id: Cylinder
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1792
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a cylinder shell with a different start and end radius.\n"
  example: []
  syntax:
    content: public Cylinder Cylinder(Vector3 p1, Vector3 p2, Vector2 radius1, Vector2 radius2, Color color, int segments = 32, bool drawEndAxes = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start point of the cylinder.
    - id: p2
      type: UnityEngine.Vector3
      description: The end point of the cylinder.
    - id: radius1
      type: UnityEngine.Vector2
      description: The radius at the start point of the cylinder.
    - id: radius2
      type: UnityEngine.Vector2
      description: The radius at the end point of the cylinder.
    - id: color
      type: UnityEngine.Color
      description: The color of the cylinder.
    - id: segments
      type: System.Int32
      description: The resolution of the cylinder. If set to zero will be adjusted based on the distance to the camera.
    - id: drawEndAxes
      type: System.Boolean
      description: Draw axis at each end of the cylinder.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Cylinder
      description: The Cylinder object.
    content.vb: Public Function Cylinder(p1 As Vector3, p2 As Vector3, radius1 As Vector2, radius2 As Vector2, color As Color, segments As Integer = 32, drawEndAxes As Boolean = False, duration As Single = 0F) As Cylinder
  overload: Global.DebugDrawMesh.Cylinder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  id: WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: WireCylinder(Vector3, Vector3, Single, Color, Int32, Boolean, Single)
  nameWithType: DebugDrawMesh.WireCylinder(Vector3, Vector3, Single, Color, Int32, Boolean, Single)
  fullName: DebugDrawMesh.WireCylinder(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, UnityEngine.Color, System.Int32, System.Boolean, System.Single)
  type: Method
  source:
    id: WireCylinder
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1809
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a full wireframe cylinder.\n"
  example: []
  syntax:
    content: public Cylinder WireCylinder(Vector3 p1, Vector3 p2, float radius, Color color, int segments = 32, bool drawEndAxes = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start point of the cylinder.
    - id: p2
      type: UnityEngine.Vector3
      description: The end point of the cylinder.
    - id: radius
      type: System.Single
      description: The radius of the cylinder.
    - id: color
      type: UnityEngine.Color
      description: The color of the cylinder.
    - id: segments
      type: System.Int32
      description: The resolution of the cylinder. If set to zero will be adjusted based on the distance to the camera.
    - id: drawEndAxes
      type: System.Boolean
      description: Draw axis at each end of the cylinder.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Cylinder
      description: The Cylinder object.
    content.vb: Public Function WireCylinder(p1 As Vector3, p2 As Vector3, radius As Single, color As Color, segments As Integer = 32, drawEndAxes As Boolean = False, duration As Single = 0F) As Cylinder
  overload: Global.DebugDrawMesh.WireCylinder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  id: WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: WireCylinder(Vector3, Vector3, Single, Single, Color, Int32, Boolean, Single)
  nameWithType: DebugDrawMesh.WireCylinder(Vector3, Vector3, Single, Single, Color, Int32, Boolean, Single)
  fullName: DebugDrawMesh.WireCylinder(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, System.Single, UnityEngine.Color, System.Int32, System.Boolean, System.Single)
  type: Method
  source:
    id: WireCylinder
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1827
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a full wireframe cylinder with a different start and end radius.\n"
  example: []
  syntax:
    content: public Cylinder WireCylinder(Vector3 p1, Vector3 p2, float radius1, float radius2, Color color, int segments = 32, bool drawEndAxes = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start point of the cylinder.
    - id: p2
      type: UnityEngine.Vector3
      description: The end point of the cylinder.
    - id: radius1
      type: System.Single
      description: The radius at the start point of the cylinder.
    - id: radius2
      type: System.Single
      description: The radius at the end point of the cylinder.
    - id: color
      type: UnityEngine.Color
      description: The color of the cylinder.
    - id: segments
      type: System.Int32
      description: The resolution of the cylinder. If set to zero will be adjusted based on the distance to the camera.
    - id: drawEndAxes
      type: System.Boolean
      description: Draw axis at each end of the cylinder.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Cylinder
      description: The Cylinder object.
    content.vb: Public Function WireCylinder(p1 As Vector3, p2 As Vector3, radius1 As Single, radius2 As Single, color As Color, segments As Integer = 32, drawEndAxes As Boolean = False, duration As Single = 0F) As Cylinder
  overload: Global.DebugDrawMesh.WireCylinder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  id: WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: WireCylinder(Vector3, Vector3, Vector2, Color, Int32, Boolean, Single)
  nameWithType: DebugDrawMesh.WireCylinder(Vector3, Vector3, Vector2, Color, Int32, Boolean, Single)
  fullName: DebugDrawMesh.WireCylinder(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Color, System.Int32, System.Boolean, System.Single)
  type: Method
  source:
    id: WireCylinder
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1844
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a full wireframe cylinder with a different start and end radius.\n"
  example: []
  syntax:
    content: public Cylinder WireCylinder(Vector3 p1, Vector3 p2, Vector2 radius, Color color, int segments = 32, bool drawEndAxes = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start point of the cylinder.
    - id: p2
      type: UnityEngine.Vector3
      description: The end point of the cylinder.
    - id: radius
      type: UnityEngine.Vector2
      description: The radius of the cylinder.
    - id: color
      type: UnityEngine.Color
      description: The color of the cylinder.
    - id: segments
      type: System.Int32
      description: The resolution of the cylinder. If set to zero will be adjusted based on the distance to the camera.
    - id: drawEndAxes
      type: System.Boolean
      description: Draw axis at each end of the cylinder.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Cylinder
      description: The Cylinder object.
    content.vb: Public Function WireCylinder(p1 As Vector3, p2 As Vector3, radius As Vector2, color As Color, segments As Integer = 32, drawEndAxes As Boolean = False, duration As Single = 0F) As Cylinder
  overload: Global.DebugDrawMesh.WireCylinder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  commentId: M:Global.DebugDrawMesh.WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  id: WireCylinder(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color,System.Int32,System.Boolean,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: WireCylinder(Vector3, Vector3, Vector2, Vector2, Color, Int32, Boolean, Single)
  nameWithType: DebugDrawMesh.WireCylinder(Vector3, Vector3, Vector2, Vector2, Color, Int32, Boolean, Single)
  fullName: DebugDrawMesh.WireCylinder(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Color, System.Int32, System.Boolean, System.Single)
  type: Method
  source:
    id: WireCylinder
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1862
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a full wireframe cylinder with a different start and end radius.\n"
  example: []
  syntax:
    content: public Cylinder WireCylinder(Vector3 p1, Vector3 p2, Vector2 radius1, Vector2 radius2, Color color, int segments = 32, bool drawEndAxes = false, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start point of the cylinder.
    - id: p2
      type: UnityEngine.Vector3
      description: The end point of the cylinder.
    - id: radius1
      type: UnityEngine.Vector2
      description: The radius at the start point of the cylinder.
    - id: radius2
      type: UnityEngine.Vector2
      description: The radius at the end point of the cylinder.
    - id: color
      type: UnityEngine.Color
      description: The color of the cylinder.
    - id: segments
      type: System.Int32
      description: The resolution of the cylinder. If set to zero will be adjusted based on the distance to the camera.
    - id: drawEndAxes
      type: System.Boolean
      description: Draw axis at each end of the cylinder.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Cylinder
      description: The Cylinder object.
    content.vb: Public Function WireCylinder(p1 As Vector3, p2 As Vector3, radius1 As Vector2, radius2 As Vector2, color As Color, segments As Integer = 32, drawEndAxes As Boolean = False, duration As Single = 0F) As Cylinder
  overload: Global.DebugDrawMesh.WireCylinder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Dot(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.Dot(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  id: Dot(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Dot(Vector3, Single, Color, Int32, Single)
  nameWithType: DebugDrawMesh.Dot(Vector3, Single, Color, Int32, Single)
  fullName: DebugDrawMesh.Dot(UnityEngine.Vector3, System.Single, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: Dot
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1878
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a 3D dot that automatically faces the camera.\n"
  example: []
  syntax:
    content: public Dot Dot(Vector3 position, float radius, Color color, int segments = 0, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The position of the dot.
    - id: radius
      type: System.Single
      description: The size of the dot.
    - id: color
      type: UnityEngine.Color
      description: The color of the dot.
    - id: segments
      type: System.Int32
      description: >-
        The shape/resolution of the dot. 0 or 4 = square, >= 3 = circle.

        If set to zero will be adjusted based on the distance to the camera.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Dot
      description: The Dot object.
    content.vb: Public Function Dot(position As Vector3, radius As Single, color As Color, segments As Integer = 0, duration As Single = 0F) As Dot
  overload: Global.DebugDrawMesh.Dot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Dot(UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Vector3,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.Dot(UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Vector3,System.Int32,System.Single)
  id: Dot(UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Vector3,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Dot(Vector3, Single, Color, Vector3, Int32, Single)
  nameWithType: DebugDrawMesh.Dot(Vector3, Single, Color, Vector3, Int32, Single)
  fullName: DebugDrawMesh.Dot(UnityEngine.Vector3, System.Single, UnityEngine.Color, UnityEngine.Vector3, System.Int32, System.Single)
  type: Method
  source:
    id: Dot
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1895
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a 3D dot.\n"
  example: []
  syntax:
    content: public Dot Dot(Vector3 position, float radius, Color color, Vector3 facing, int segments = 0, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The position of the dot.
    - id: radius
      type: System.Single
      description: The size of the dot.
    - id: color
      type: UnityEngine.Color
      description: The color of the dot.
    - id: facing
      type: UnityEngine.Vector3
      description: The forward direction of the dot. Automatically update if faceCamera is true.
    - id: segments
      type: System.Int32
      description: >-
        The shape/resolution of the dot. 0 = square.

        If set to zero will be adjusted based on the distance to the camera.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Dot
      description: The Dot object.
    content.vb: Public Function Dot(position As Vector3, radius As Single, color As Color, facing As Vector3, segments As Integer = 0, duration As Single = 0F) As Dot
  overload: Global.DebugDrawMesh.Dot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Dots(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.Dots(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Int32,System.Single)
  id: Dots(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Dots(List<Vector3>, List<Single>, List<Color>, Int32, Single)
  nameWithType: DebugDrawMesh.Dots(List<Vector3>, List<Single>, List<Color>, Int32, Single)
  fullName: DebugDrawMesh.Dots(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<System.Single>, System.Collections.Generic.List<UnityEngine.Color>, System.Int32, System.Single)
  type: Method
  source:
    id: Dots
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1910
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nBatch draws 3D dots that automatically faces the camera.\n"
  example: []
  syntax:
    content: public Dots Dots(List<Vector3> positions, List<float> sizes, List<Color> colors, int segments = 0, float duration = 0F)
    parameters:
    - id: positions
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: The positions of each dot.
    - id: sizes
      type: System.Collections.Generic.List{System.Single}
      description: The sizes each dot.
    - id: colors
      type: System.Collections.Generic.List{UnityEngine.Color}
      description: The colors each dot.
    - id: segments
      type: System.Int32
      description: The shape/resolution of the dots. 0 or 4 = square, >= 3 = circle.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Dots
      description: The Dot object.
    content.vb: Public Function Dots(positions As List(Of Vector3), sizes As List(Of Single), colors As List(Of Color), segments As Integer = 0, duration As Single = 0F) As Dots
  overload: Global.DebugDrawMesh.Dots*
  nameWithType.vb: DebugDrawMesh.Dots(List(Of Vector3), List(Of Single), List(Of Color), Int32, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.Dots(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of System.Single), System.Collections.Generic.List(Of UnityEngine.Color), System.Int32, System.Single)
  name.vb: Dots(List(Of Vector3), List(Of Single), List(Of Color), Int32, Single)
- uid: Global.DebugDrawMesh.Dots(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},UnityEngine.Vector3,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.Dots(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},UnityEngine.Vector3,System.Int32,System.Single)
  id: Dots(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},UnityEngine.Vector3,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Dots(List<Vector3>, List<Single>, List<Color>, Vector3, Int32, Single)
  nameWithType: DebugDrawMesh.Dots(List<Vector3>, List<Single>, List<Color>, Vector3, Int32, Single)
  fullName: DebugDrawMesh.Dots(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<System.Single>, System.Collections.Generic.List<UnityEngine.Color>, UnityEngine.Vector3, System.Int32, System.Single)
  type: Method
  source:
    id: Dots
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1926
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nBatch draws 3D dots.\n"
  example: []
  syntax:
    content: public Dots Dots(List<Vector3> positions, List<float> sizes, List<Color> colors, Vector3 facing, int segments = 0, float duration = 0F)
    parameters:
    - id: positions
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: The positions of each dot.
    - id: sizes
      type: System.Collections.Generic.List{System.Single}
      description: The sizes each dot.
    - id: colors
      type: System.Collections.Generic.List{UnityEngine.Color}
      description: The colors each dot.
    - id: facing
      type: UnityEngine.Vector3
      description: The forward direction of the dot. Automatically update if faceCamera is true.
    - id: segments
      type: System.Int32
      description: The shape/resolution of the dots. 0 = square.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Dots
      description: The Dots object.
    content.vb: Public Function Dots(positions As List(Of Vector3), sizes As List(Of Single), colors As List(Of Color), facing As Vector3, segments As Integer = 0, duration As Single = 0F) As Dots
  overload: Global.DebugDrawMesh.Dots*
  nameWithType.vb: DebugDrawMesh.Dots(List(Of Vector3), List(Of Single), List(Of Color), Vector3, Int32, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.Dots(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of System.Single), System.Collections.Generic.List(Of UnityEngine.Color), UnityEngine.Vector3, System.Int32, System.Single)
  name.vb: Dots(List(Of Vector3), List(Of Single), List(Of Color), Vector3, Int32, Single)
- uid: Global.DebugDrawMesh.Ellipse(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Int32,DebugDrawItems.DrawEllipseAxes,System.Single)
  commentId: M:Global.DebugDrawMesh.Ellipse(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Int32,DebugDrawItems.DrawEllipseAxes,System.Single)
  id: Ellipse(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Int32,DebugDrawItems.DrawEllipseAxes,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Ellipse(Vector3, Single, Vector3, Color, Int32, DrawEllipseAxes, Single)
  nameWithType: DebugDrawMesh.Ellipse(Vector3, Single, Vector3, Color, Int32, DrawEllipseAxes, Single)
  fullName: DebugDrawMesh.Ellipse(UnityEngine.Vector3, System.Single, UnityEngine.Vector3, UnityEngine.Color, System.Int32, DebugDrawItems.DrawEllipseAxes, System.Single)
  type: Method
  source:
    id: Ellipse
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1943
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wire ellipse.\n"
  example: []
  syntax:
    content: public Ellipse Ellipse(Vector3 position, float radius, Vector3 facing, Color color, int segments = 32, DrawEllipseAxes drawAxes = DrawEllipseAxes.Never, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the ellipse.
    - id: radius
      type: System.Single
      description: The radius of the ellipse.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the ellipse is facing.
    - id: color
      type: UnityEngine.Color
      description: The colour of the ellipse.
    - id: segments
      type: System.Int32
      description: The resolution of the ellipse.
    - id: drawAxes
      type: DebugDrawItems.DrawEllipseAxes
      description: Options for drawing an X and Y axis inside the ellipse.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Ellipse
      description: The ellipse object.
    content.vb: Public Function Ellipse(position As Vector3, radius As Single, facing As Vector3, color As Color, segments As Integer = 32, drawAxes As DrawEllipseAxes = DrawEllipseAxes.Never, duration As Single = 0F) As Ellipse
  overload: Global.DebugDrawMesh.Ellipse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.FillEllipse(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.FillEllipse(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  id: FillEllipse(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: FillEllipse(Vector3, Single, Vector3, Color, Int32, Single)
  nameWithType: DebugDrawMesh.FillEllipse(Vector3, Single, Vector3, Color, Int32, Single)
  fullName: DebugDrawMesh.FillEllipse(UnityEngine.Vector3, System.Single, UnityEngine.Vector3, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: FillEllipse
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1959
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a filled ellipse.\n"
  example: []
  syntax:
    content: public Ellipse FillEllipse(Vector3 position, float radius, Vector3 facing, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the ellipse.
    - id: radius
      type: System.Single
      description: The radius of the ellipse.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the ellipse is facing.
    - id: color
      type: UnityEngine.Color
      description: The colour of the ellipse.
    - id: segments
      type: System.Int32
      description: The resolution of the ellipse.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Ellipse
      description: The ellipse object.
    content.vb: Public Function FillEllipse(position As Vector3, radius As Single, facing As Vector3, color As Color, segments As Integer = 32, duration As Single = 0F) As Ellipse
  overload: Global.DebugDrawMesh.FillEllipse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Arc(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,DebugDrawItems.DrawArcSegments,DebugDrawItems.DrawEllipseAxes,System.Single)
  commentId: M:Global.DebugDrawMesh.Arc(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,DebugDrawItems.DrawArcSegments,DebugDrawItems.DrawEllipseAxes,System.Single)
  id: Arc(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,DebugDrawItems.DrawArcSegments,DebugDrawItems.DrawEllipseAxes,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Arc(Vector3, Single, Vector3, Single, Single, Color, Int32, DrawArcSegments, DrawEllipseAxes, Single)
  nameWithType: DebugDrawMesh.Arc(Vector3, Single, Vector3, Single, Single, Color, Int32, DrawArcSegments, DrawEllipseAxes, Single)
  fullName: DebugDrawMesh.Arc(UnityEngine.Vector3, System.Single, UnityEngine.Vector3, System.Single, System.Single, UnityEngine.Color, System.Int32, DebugDrawItems.DrawArcSegments, DebugDrawItems.DrawEllipseAxes, System.Single)
  type: Method
  source:
    id: Arc
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1979
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wire arc.\n"
  example: []
  syntax:
    content: public Ellipse Arc(Vector3 position, float radius, Vector3 facing, float startAngle, float endAngle, Color color, int segments = 32, DrawArcSegments drawArcSegments = DrawArcSegments.OpenOnly, DrawEllipseAxes drawAxes = DrawEllipseAxes.Never, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the ellipse.
    - id: radius
      type: System.Single
      description: The radius of the ellipse.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the ellipse is facing.
    - id: startAngle
      type: System.Single
      description: The start angle in degrees of the arc.
    - id: endAngle
      type: System.Single
      description: The end angle in degrees of the arc.
    - id: color
      type: UnityEngine.Color
      description: The colour of the ellipse.
    - id: segments
      type: System.Int32
      description: The resolution of the ellipse.
    - id: drawArcSegments
      type: DebugDrawItems.DrawArcSegments
      description: Options for connecting the centre of the ellipse and the arc end points.
    - id: drawAxes
      type: DebugDrawItems.DrawEllipseAxes
      description: Options for drawing an X and Y axis inside the ellipse.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Ellipse
      description: The ellipse object.
    content.vb: Public Function Arc(position As Vector3, radius As Single, facing As Vector3, startAngle As Single, endAngle As Single, color As Color, segments As Integer = 32, drawArcSegments As DrawArcSegments = DrawArcSegments.OpenOnly, drawAxes As DrawEllipseAxes = DrawEllipseAxes.Never, duration As Single = 0F) As Ellipse
  overload: Global.DebugDrawMesh.Arc*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.FillArc(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.FillArc(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Single)
  id: FillArc(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: FillArc(Vector3, Single, Vector3, Single, Single, Color, Int32, Single)
  nameWithType: DebugDrawMesh.FillArc(Vector3, Single, Vector3, Single, Single, Color, Int32, Single)
  fullName: DebugDrawMesh.FillArc(UnityEngine.Vector3, System.Single, UnityEngine.Vector3, System.Single, System.Single, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: FillArc
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 1997
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a filled arc.\n"
  example: []
  syntax:
    content: public Ellipse FillArc(Vector3 position, float radius, Vector3 facing, float startAngle, float endAngle, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the ellipse.
    - id: radius
      type: System.Single
      description: The radius of the ellipse.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the ellipse is facing.
    - id: startAngle
      type: System.Single
      description: The start angle in degrees of the arc.
    - id: endAngle
      type: System.Single
      description: The end angle in degrees of the arc.
    - id: color
      type: UnityEngine.Color
      description: The colour of the ellipse.
    - id: segments
      type: System.Int32
      description: The resolution of the ellipse.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Ellipse
      description: The ellipse object.
    content.vb: Public Function FillArc(position As Vector3, radius As Single, facing As Vector3, startAngle As Single, endAngle As Single, color As Color, segments As Integer = 32, duration As Single = 0F) As Ellipse
  overload: Global.DebugDrawMesh.FillArc*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Ellipse(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Int32,DebugDrawItems.DrawEllipseAxes,System.Single)
  commentId: M:Global.DebugDrawMesh.Ellipse(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Int32,DebugDrawItems.DrawEllipseAxes,System.Single)
  id: Ellipse(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Int32,DebugDrawItems.DrawEllipseAxes,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Ellipse(Vector3, Vector2, Vector3, Color, Int32, DrawEllipseAxes, Single)
  nameWithType: DebugDrawMesh.Ellipse(Vector3, Vector2, Vector3, Color, Int32, DrawEllipseAxes, Single)
  fullName: DebugDrawMesh.Ellipse(UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector3, UnityEngine.Color, System.Int32, DebugDrawItems.DrawEllipseAxes, System.Single)
  type: Method
  source:
    id: Ellipse
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2014
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wire ellipse.\n"
  example: []
  syntax:
    content: public Ellipse Ellipse(Vector3 position, Vector2 size, Vector3 facing, Color color, int segments = 32, DrawEllipseAxes drawAxes = DrawEllipseAxes.Never, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the ellipse.
    - id: size
      type: UnityEngine.Vector2
      description: The size/radius of the ellipse.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the ellipse is facing.
    - id: color
      type: UnityEngine.Color
      description: The colour of the ellipse.
    - id: segments
      type: System.Int32
      description: The resolution of the ellipse.
    - id: drawAxes
      type: DebugDrawItems.DrawEllipseAxes
      description: Options for drawing an X and Y axis inside the ellipse.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Ellipse
      description: The ellipse object.
    content.vb: Public Function Ellipse(position As Vector3, size As Vector2, facing As Vector3, color As Color, segments As Integer = 32, drawAxes As DrawEllipseAxes = DrawEllipseAxes.Never, duration As Single = 0F) As Ellipse
  overload: Global.DebugDrawMesh.Ellipse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.FillEllipse(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.FillEllipse(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  id: FillEllipse(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: FillEllipse(Vector3, Vector2, Vector3, Color, Int32, Single)
  nameWithType: DebugDrawMesh.FillEllipse(Vector3, Vector2, Vector3, Color, Int32, Single)
  fullName: DebugDrawMesh.FillEllipse(UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector3, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: FillEllipse
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2030
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a filled ellipse.\n"
  example: []
  syntax:
    content: public Ellipse FillEllipse(Vector3 position, Vector2 size, Vector3 facing, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the ellipse.
    - id: size
      type: UnityEngine.Vector2
      description: The size/radius of the ellipse.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the ellipse is facing.
    - id: color
      type: UnityEngine.Color
      description: The colour of the ellipse.
    - id: segments
      type: System.Int32
      description: The resolution of the ellipse.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Ellipse
      description: The ellipse object.
    content.vb: Public Function FillEllipse(position As Vector3, size As Vector2, facing As Vector3, color As Color, segments As Integer = 32, duration As Single = 0F) As Ellipse
  overload: Global.DebugDrawMesh.FillEllipse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Arc(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,DebugDrawItems.DrawArcSegments,DebugDrawItems.DrawEllipseAxes,System.Single)
  commentId: M:Global.DebugDrawMesh.Arc(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,DebugDrawItems.DrawArcSegments,DebugDrawItems.DrawEllipseAxes,System.Single)
  id: Arc(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,DebugDrawItems.DrawArcSegments,DebugDrawItems.DrawEllipseAxes,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Arc(Vector3, Vector2, Vector3, Single, Single, Color, Int32, DrawArcSegments, DrawEllipseAxes, Single)
  nameWithType: DebugDrawMesh.Arc(Vector3, Vector2, Vector3, Single, Single, Color, Int32, DrawArcSegments, DrawEllipseAxes, Single)
  fullName: DebugDrawMesh.Arc(UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector3, System.Single, System.Single, UnityEngine.Color, System.Int32, DebugDrawItems.DrawArcSegments, DebugDrawItems.DrawEllipseAxes, System.Single)
  type: Method
  source:
    id: Arc
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2050
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wire arc.\n"
  example: []
  syntax:
    content: public Ellipse Arc(Vector3 position, Vector2 size, Vector3 facing, float startAngle, float endAngle, Color color, int segments = 32, DrawArcSegments drawArcSegments = DrawArcSegments.OpenOnly, DrawEllipseAxes drawAxes = DrawEllipseAxes.Never, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the ellipse.
    - id: size
      type: UnityEngine.Vector2
      description: The size/radius of the ellipse.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the ellipse is facing.
    - id: startAngle
      type: System.Single
      description: The start angle in degrees of the arc.
    - id: endAngle
      type: System.Single
      description: The end angle in degrees of the arc.
    - id: color
      type: UnityEngine.Color
      description: The colour of the ellipse.
    - id: segments
      type: System.Int32
      description: The resolution of the ellipse.
    - id: drawArcSegments
      type: DebugDrawItems.DrawArcSegments
      description: Options for connecting the centre of the ellipse and the arc end points.
    - id: drawAxes
      type: DebugDrawItems.DrawEllipseAxes
      description: Options for drawing an X and Y axis inside the ellipse.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Ellipse
      description: The ellipse object.
    content.vb: Public Function Arc(position As Vector3, size As Vector2, facing As Vector3, startAngle As Single, endAngle As Single, color As Color, segments As Integer = 32, drawArcSegments As DrawArcSegments = DrawArcSegments.OpenOnly, drawAxes As DrawEllipseAxes = DrawEllipseAxes.Never, duration As Single = 0F) As Ellipse
  overload: Global.DebugDrawMesh.Arc*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.FillArc(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.FillArc(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Single)
  id: FillArc(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: FillArc(Vector3, Vector2, Vector3, Single, Single, Color, Int32, Single)
  nameWithType: DebugDrawMesh.FillArc(Vector3, Vector2, Vector3, Single, Single, Color, Int32, Single)
  fullName: DebugDrawMesh.FillArc(UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector3, System.Single, System.Single, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: FillArc
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2068
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a filled arc.\n"
  example: []
  syntax:
    content: public Ellipse FillArc(Vector3 position, Vector2 size, Vector3 facing, float startAngle, float endAngle, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the ellipse.
    - id: size
      type: UnityEngine.Vector2
      description: The size/radius of the ellipse.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the ellipse is facing.
    - id: startAngle
      type: System.Single
      description: The start angle in degrees of the arc.
    - id: endAngle
      type: System.Single
      description: The end angle in degrees of the arc.
    - id: color
      type: UnityEngine.Color
      description: The colour of the ellipse.
    - id: segments
      type: System.Int32
      description: The resolution of the ellipse.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Ellipse
      description: The ellipse object.
    content.vb: Public Function FillArc(position As Vector3, size As Vector2, facing As Vector3, startAngle As Single, endAngle As Single, color As Color, segments As Integer = 32, duration As Single = 0F) As Ellipse
  overload: Global.DebugDrawMesh.FillArc*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Line(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Line(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single)
  id: Line(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Line(Vector3, Vector3, Color, Color, Single)
  nameWithType: DebugDrawMesh.Line(Vector3, Vector3, Color, Color, Single)
  fullName: DebugDrawMesh.Line(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Line
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2083
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a line.\n"
  example: []
  syntax:
    content: public Line Line(Vector3 p1, Vector3 p2, Color color1, Color color2, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start of the line.
    - id: p2
      type: UnityEngine.Vector3
      description: The end of the line.
    - id: color1
      type: UnityEngine.Color
      description: The line&apos;s colour at the start.
    - id: color2
      type: UnityEngine.Color
      description: The line&apos;s colour at the end.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Line
      description: The Line object.
    content.vb: Public Function Line(p1 As Vector3, p2 As Vector3, color1 As Color, color2 As Color, duration As Single = 0F) As Line
  overload: Global.DebugDrawMesh.Line*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Line(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Line(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: Line(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Line(Vector3, Vector3, Color, Single)
  nameWithType: DebugDrawMesh.Line(Vector3, Vector3, Color, Single)
  fullName: DebugDrawMesh.Line(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Line
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2097
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a line.\n"
  example: []
  syntax:
    content: public Line Line(Vector3 p1, Vector3 p2, Color color, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start of the line.
    - id: p2
      type: UnityEngine.Vector3
      description: The end of the line.
    - id: color
      type: UnityEngine.Color
      description: The line&apos;s colour.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist.
    return:
      type: DebugDrawItems.Line
      description: The Line object.
    content.vb: Public Function Line(p1 As Vector3, p2 As Vector3, color As Color, duration As Single = 0F) As Line
  overload: Global.DebugDrawMesh.Line*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)
  id: Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Line3D(Vector3, Vector3, Single, Color, Color, Single)
  nameWithType: DebugDrawMesh.Line3D(Vector3, Vector3, Single, Color, Color, Single)
  fullName: DebugDrawMesh.Line3D(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, UnityEngine.Color, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Line3D
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2113
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a 3D line that orients itself towards the camera.\n"
  example: []
  syntax:
    content: public Line3D Line3D(Vector3 p1, Vector3 p2, float size, Color color1, Color color2, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start of the line.
    - id: p2
      type: UnityEngine.Vector3
      description: The end of the line.
    - id: size
      type: System.Single
      description: The line thickness.
    - id: color1
      type: UnityEngine.Color
      description: The line&apos;s colour at the start.
    - id: color2
      type: UnityEngine.Color
      description: The line&apos;s colour at the end.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Line3D
      description: The Line object.
    content.vb: Public Function Line3D(p1 As Vector3, p2 As Vector3, size As Single, color1 As Color, color2 As Color, duration As Single = 0F) As Line3D
  overload: Global.DebugDrawMesh.Line3D*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)
  id: Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Line3D(Vector3, Vector3, Single, Color, Single)
  nameWithType: DebugDrawMesh.Line3D(Vector3, Vector3, Single, Color, Single)
  fullName: DebugDrawMesh.Line3D(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Line3D
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2128
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a 3D line that orients itself towards the camera.\n"
  example: []
  syntax:
    content: public Line3D Line3D(Vector3 p1, Vector3 p2, float size, Color color, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start of the line.
    - id: p2
      type: UnityEngine.Vector3
      description: The end of the line.
    - id: size
      type: System.Single
      description: The line thickness.
    - id: color
      type: UnityEngine.Color
      description: The line&apos;s colour.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist.
    return:
      type: DebugDrawItems.Line3D
      description: The Line3D object.
    content.vb: Public Function Line3D(p1 As Vector3, p2 As Vector3, size As Single, color As Color, duration As Single = 0F) As Line3D
  overload: Global.DebugDrawMesh.Line3D*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single)
  id: Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Line3D(Vector3, Vector3, Single, Vector3, Color, Color, Single)
  nameWithType: DebugDrawMesh.Line3D(Vector3, Vector3, Single, Vector3, Color, Color, Single)
  fullName: DebugDrawMesh.Line3D(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, UnityEngine.Vector3, UnityEngine.Color, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Line3D
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2145
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a 3D line facing the given direction.\n"
  example: []
  syntax:
    content: public Line3D Line3D(Vector3 p1, Vector3 p2, float size, Vector3 facing, Color color1, Color color2, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start of the line.
    - id: p2
      type: UnityEngine.Vector3
      description: The end of the line.
    - id: size
      type: System.Single
      description: The line thickness.
    - id: facing
      type: UnityEngine.Vector3
      description: The forward direction of the line.
    - id: color1
      type: UnityEngine.Color
      description: The line&apos;s colour at the start.
    - id: color2
      type: UnityEngine.Color
      description: The line&apos;s colour at the end.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Line3D
      description: The Line object.
    content.vb: Public Function Line3D(p1 As Vector3, p2 As Vector3, size As Single, facing As Vector3, color1 As Color, color2 As Color, duration As Single = 0F) As Line3D
  overload: Global.DebugDrawMesh.Line3D*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: Line3D(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Line3D(Vector3, Vector3, Single, Vector3, Color, Single)
  nameWithType: DebugDrawMesh.Line3D(Vector3, Vector3, Single, Vector3, Color, Single)
  fullName: DebugDrawMesh.Line3D(UnityEngine.Vector3, UnityEngine.Vector3, System.Single, UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Line3D
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2161
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a 3D line that orients itself towards the camera.\n"
  example: []
  syntax:
    content: public Line3D Line3D(Vector3 p1, Vector3 p2, float size, Vector3 facing, Color color, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The start of the line.
    - id: p2
      type: UnityEngine.Vector3
      description: The end of the line.
    - id: size
      type: System.Single
      description: The line thickness.
    - id: facing
      type: UnityEngine.Vector3
      description: The forward direction of the line.
    - id: color
      type: UnityEngine.Color
      description: The line&apos;s colour.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist.
    return:
      type: DebugDrawItems.Line3D
      description: The Line3D object.
    content.vb: Public Function Line3D(p1 As Vector3, p2 As Vector3, size As Single, facing As Vector3, color As Color, duration As Single = 0F) As Line3D
  overload: Global.DebugDrawMesh.Line3D*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Lines(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  commentId: M:Global.DebugDrawMesh.Lines(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  id: Lines(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Lines(List<Vector3>, List<Color>, Single)
  nameWithType: DebugDrawMesh.Lines(List<Vector3>, List<Color>, Single)
  fullName: DebugDrawMesh.Lines(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<UnityEngine.Color>, System.Single)
  type: Method
  source:
    id: Lines
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2175
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nBatch draw multiple lines from a positions and colors array.\nBoth arrays must be non-null, of the same size, and multiples of two - two entries for each line.\n"
  example: []
  syntax:
    content: public Lines Lines(List<Vector3> positions, List<Color> colors, float duration = 0F)
    parameters:
    - id: positions
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: The positions of the start and end points of each line.
    - id: colors
      type: System.Collections.Generic.List{UnityEngine.Color}
      description: The colors of the start and end points of each line.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Lines
      description: The Line object.
    content.vb: Public Function Lines(positions As List(Of Vector3), colors As List(Of Color), duration As Single = 0F) As Lines
  overload: Global.DebugDrawMesh.Lines*
  nameWithType.vb: DebugDrawMesh.Lines(List(Of Vector3), List(Of Color), Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.Lines(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of UnityEngine.Color), System.Single)
  name.vb: Lines(List(Of Vector3), List(Of Color), Single)
- uid: Global.DebugDrawMesh.Lines3D(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  commentId: M:Global.DebugDrawMesh.Lines3D(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  id: Lines3D(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Lines3D(List<Vector3>, List<Single>, List<Color>, Single)
  nameWithType: DebugDrawMesh.Lines3D(List<Vector3>, List<Single>, List<Color>, Single)
  fullName: DebugDrawMesh.Lines3D(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<System.Single>, System.Collections.Generic.List<UnityEngine.Color>, System.Single)
  type: Method
  source:
    id: Lines3D
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2189
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a batch of 3D lines that orients itself towards the camera.\n"
  example: []
  syntax:
    content: public Lines3D Lines3D(List<Vector3> positions, List<float> sizes, List<Color> colors, float duration = 0F)
    parameters:
    - id: positions
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: The positions of the start and end points of each line.
    - id: sizes
      type: System.Collections.Generic.List{System.Single}
      description: The line thickness, one item for each pair of positions and colors.
    - id: colors
      type: System.Collections.Generic.List{UnityEngine.Color}
      description: The colors of the start and end points of each line.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Lines3D
      description: The Line object.
    content.vb: Public Function Lines3D(positions As List(Of Vector3), sizes As List(Of Single), colors As List(Of Color), duration As Single = 0F) As Lines3D
  overload: Global.DebugDrawMesh.Lines3D*
  nameWithType.vb: DebugDrawMesh.Lines3D(List(Of Vector3), List(Of Single), List(Of Color), Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.Lines3D(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of System.Single), System.Collections.Generic.List(Of UnityEngine.Color), System.Single)
  name.vb: Lines3D(List(Of Vector3), List(Of Single), List(Of Color), Single)
- uid: Global.DebugDrawMesh.Lines3D(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Nullable{UnityEngine.Vector3},System.Single)
  commentId: M:Global.DebugDrawMesh.Lines3D(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Nullable{UnityEngine.Vector3},System.Single)
  id: Lines3D(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{UnityEngine.Color},System.Nullable{UnityEngine.Vector3},System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Lines3D(List<Vector3>, List<Single>, List<Color>, Nullable<Vector3>, Single)
  nameWithType: DebugDrawMesh.Lines3D(List<Vector3>, List<Single>, List<Color>, Nullable<Vector3>, Single)
  fullName: DebugDrawMesh.Lines3D(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<System.Single>, System.Collections.Generic.List<UnityEngine.Color>, System.Nullable<UnityEngine.Vector3>, System.Single)
  type: Method
  source:
    id: Lines3D
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2205
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a 3D line facing the given direction.\n"
  example: []
  syntax:
    content: public Lines3D Lines3D(List<Vector3> positions, List<float> sizes, List<Color> colors, Vector3? facing, float duration = 0F)
    parameters:
    - id: positions
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: The positions of the start and end points of each line.
    - id: sizes
      type: System.Collections.Generic.List{System.Single}
      description: The line thickness, one item for each pair of positions and colors.
    - id: colors
      type: System.Collections.Generic.List{UnityEngine.Color}
      description: The colors of the start and end points of each line.
    - id: facing
      type: System.Nullable{UnityEngine.Vector3}
      description: >-
        The forward direction of the line. Automatically updated if faceCamera is true.

        If null the lines will automatically rotate to face the camera.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Lines3D
      description: The Line object.
    content.vb: Public Function Lines3D(positions As List(Of Vector3), sizes As List(Of Single), colors As List(Of Color), facing As Vector3?, duration As Single = 0F) As Lines3D
  overload: Global.DebugDrawMesh.Lines3D*
  nameWithType.vb: DebugDrawMesh.Lines3D(List(Of Vector3), List(Of Single), List(Of Color), Nullable(Of Vector3), Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.Lines3D(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of System.Single), System.Collections.Generic.List(Of UnityEngine.Color), System.Nullable(Of UnityEngine.Vector3), System.Single)
  name.vb: Lines3D(List(Of Vector3), List(Of Single), List(Of Color), Nullable(Of Vector3), Single)
- uid: Global.DebugDrawMesh.Mesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Collections.Generic.List{System.Int32},System.Single)
  commentId: M:Global.DebugDrawMesh.Mesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Collections.Generic.List{System.Int32},System.Single)
  id: Mesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Collections.Generic.List{System.Int32},System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Mesh(List<Vector3>, List<Color>, List<Int32>, Single)
  nameWithType: DebugDrawMesh.Mesh(List<Vector3>, List<Color>, List<Int32>, Single)
  fullName: DebugDrawMesh.Mesh(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<UnityEngine.Color>, System.Collections.Generic.List<System.Int32>, System.Single)
  type: Method
  source:
    id: Mesh
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2219
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wireframe mesh.\n"
  example: []
  syntax:
    content: public MeshItem Mesh(List<Vector3> vertices, List<Color> colors, List<int> indices, float duration = 0F)
    parameters:
    - id: vertices
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: The list of vertices.
    - id: colors
      type: System.Collections.Generic.List{UnityEngine.Color}
      description: The list of colors.
    - id: indices
      type: System.Collections.Generic.List{System.Int32}
      description: The list of triangle indices.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.MeshItem
      description: The Line object.
    content.vb: Public Function Mesh(vertices As List(Of Vector3), colors As List(Of Color), indices As List(Of Integer), duration As Single = 0F) As MeshItem
  overload: Global.DebugDrawMesh.Mesh*
  nameWithType.vb: DebugDrawMesh.Mesh(List(Of Vector3), List(Of Color), List(Of Int32), Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.Mesh(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of UnityEngine.Color), System.Collections.Generic.List(Of System.Int32), System.Single)
  name.vb: Mesh(List(Of Vector3), List(Of Color), List(Of Int32), Single)
- uid: Global.DebugDrawMesh.Mesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Int32},UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Mesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Int32},UnityEngine.Color,System.Single)
  id: Mesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{System.Int32},UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Mesh(List<Vector3>, List<Int32>, Color, Single)
  nameWithType: DebugDrawMesh.Mesh(List<Vector3>, List<Int32>, Color, Single)
  fullName: DebugDrawMesh.Mesh(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<System.Int32>, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Mesh
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2233
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wireframe mesh with a single color.\n"
  example: []
  syntax:
    content: public MeshItem Mesh(List<Vector3> vertices, List<int> indices, Color color, float duration = 0F)
    parameters:
    - id: vertices
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: The list of vertices.
    - id: indices
      type: System.Collections.Generic.List{System.Int32}
      description: The list of triangle indices.
    - id: color
      type: UnityEngine.Color
      description: The color of the mesh.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.MeshItem
      description: The Line object.
    content.vb: Public Function Mesh(vertices As List(Of Vector3), indices As List(Of Integer), color As Color, duration As Single = 0F) As MeshItem
  overload: Global.DebugDrawMesh.Mesh*
  nameWithType.vb: DebugDrawMesh.Mesh(List(Of Vector3), List(Of Int32), Color, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.Mesh(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of System.Int32), UnityEngine.Color, System.Single)
  name.vb: Mesh(List(Of Vector3), List(Of Int32), Color, Single)
- uid: Global.DebugDrawMesh.Mesh(UnityEngine.Mesh,System.Nullable{UnityEngine.Color},System.Single)
  commentId: M:Global.DebugDrawMesh.Mesh(UnityEngine.Mesh,System.Nullable{UnityEngine.Color},System.Single)
  id: Mesh(UnityEngine.Mesh,System.Nullable{UnityEngine.Color},System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Mesh(Mesh, Nullable<Color>, Single)
  nameWithType: DebugDrawMesh.Mesh(Mesh, Nullable<Color>, Single)
  fullName: DebugDrawMesh.Mesh(UnityEngine.Mesh, System.Nullable<UnityEngine.Color>, System.Single)
  type: Method
  source:
    id: Mesh
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2247
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wireframe mesh. This will allocate new lists and fetch the mesh data so it&apos;s advisable to\nnot call this every frame and instead create it once keep a reference to it.\n"
  example: []
  syntax:
    content: public MeshItem Mesh(Mesh mesh, Color? color, float duration = 0F)
    parameters:
    - id: mesh
      type: UnityEngine.Mesh
      description: The mesh.
    - id: color
      type: System.Nullable{UnityEngine.Color}
      description: The color of the mesh. If null the mesh must have color data associated with it
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.MeshItem
      description: The Line object.
    content.vb: Public Function Mesh(mesh As Mesh, color As Color?, duration As Single = 0F) As MeshItem
  overload: Global.DebugDrawMesh.Mesh*
  nameWithType.vb: DebugDrawMesh.Mesh(Mesh, Nullable(Of Color), Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.Mesh(UnityEngine.Mesh, System.Nullable(Of UnityEngine.Color), System.Single)
  name.vb: Mesh(Mesh, Nullable(Of Color), Single)
- uid: Global.DebugDrawMesh.Point(UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Point(UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: Point(UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Point(Vector3, Color, Single)
  nameWithType: DebugDrawMesh.Point(Vector3, Color, Single)
  fullName: DebugDrawMesh.Point(UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Point
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2260
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a point that has no size.\n"
  example: []
  syntax:
    content: public Point Point(Vector3 position, Color color, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The position of the point.
    - id: color
      type: UnityEngine.Color
      description: The point&apos;s.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Point
      description: The Line object.
    content.vb: Public Function Point(position As Vector3, color As Color, duration As Single = 0F) As Point
  overload: Global.DebugDrawMesh.Point*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Points(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  commentId: M:Global.DebugDrawMesh.Points(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  id: Points(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Points(List<Vector3>, List<Color>, Single)
  nameWithType: DebugDrawMesh.Points(List<Vector3>, List<Color>, Single)
  fullName: DebugDrawMesh.Points(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<UnityEngine.Color>, System.Single)
  type: Method
  source:
    id: Points
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2274
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nBatch draw multiple points from a positions and colors array.\nBoth arrays must be non-null and of the same size.\n"
  example: []
  syntax:
    content: public Points Points(List<Vector3> positions, List<Color> colors, float duration = 0F)
    parameters:
    - id: positions
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: The positions of the start and end points of each line.
    - id: colors
      type: System.Collections.Generic.List{UnityEngine.Color}
      description: The colors of the start and end points of each line.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Points
      description: The Line object.
    content.vb: Public Function Points(positions As List(Of Vector3), colors As List(Of Color), duration As Single = 0F) As Points
  overload: Global.DebugDrawMesh.Points*
  nameWithType.vb: DebugDrawMesh.Points(List(Of Vector3), List(Of Color), Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DebugDrawMesh.Points(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of UnityEngine.Color), System.Single)
  name.vb: Points(List(Of Vector3), List(Of Color), Single)
- uid: Global.DebugDrawMesh.Quad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Quad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: Quad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Quad(Vector3, Vector3, Vector3, Vector3, Color, Single)
  nameWithType: DebugDrawMesh.Quad(Vector3, Vector3, Vector3, Vector3, Color, Single)
  fullName: DebugDrawMesh.Quad(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Quad
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2290
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wire quad.\n"
  example: []
  syntax:
    content: public Quad Quad(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4, Color color, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The first point of the quad.
    - id: p2
      type: UnityEngine.Vector3
      description: The second point of the quad.
    - id: p3
      type: UnityEngine.Vector3
      description: The third point of the quad.
    - id: p4
      type: UnityEngine.Vector3
      description: The third point of the quad.
    - id: color
      type: UnityEngine.Color
      description: The colour of the quad.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Quad
      description: The ellipse object.
    content.vb: Public Function Quad(p1 As Vector3, p2 As Vector3, p3 As Vector3, p4 As Vector3, color As Color, duration As Single = 0F) As Quad
  overload: Global.DebugDrawMesh.Quad*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Quad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Quad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  id: Quad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Quad(Vector3, Vector3, Vector3, Vector3, Color, Color, Color, Color, Single)
  nameWithType: DebugDrawMesh.Quad(Vector3, Vector3, Vector3, Vector3, Color, Color, Color, Color, Single)
  fullName: DebugDrawMesh.Quad(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, UnityEngine.Color, UnityEngine.Color, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Quad
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2309
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wire quad.\n"
  example: []
  syntax:
    content: public Quad Quad(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4, Color color1, Color color2, Color color3, Color color4, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The first point of the quad.
    - id: p2
      type: UnityEngine.Vector3
      description: The second point of the quad.
    - id: p3
      type: UnityEngine.Vector3
      description: The third point of the quad.
    - id: p4
      type: UnityEngine.Vector3
      description: The fourth point of the quad.
    - id: color1
      type: UnityEngine.Color
      description: The color of the quad&apos;s first point..
    - id: color2
      type: UnityEngine.Color
      description: The color of the quad&apos;s second point.
    - id: color3
      type: UnityEngine.Color
      description: The color of the quad&apos;s third point.
    - id: color4
      type: UnityEngine.Color
      description: The color of the quad&apos;s fourth point.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Quad
      description: The ellipse object.
    content.vb: Public Function Quad(p1 As Vector3, p2 As Vector3, p3 As Vector3, p4 As Vector3, color1 As Color, color2 As Color, color3 As Color, color4 As Color, duration As Single = 0F) As Quad
  overload: Global.DebugDrawMesh.Quad*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.FillQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.FillQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: FillQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: FillQuad(Vector3, Vector3, Vector3, Vector3, Color, Single)
  nameWithType: DebugDrawMesh.FillQuad(Vector3, Vector3, Vector3, Vector3, Color, Single)
  fullName: DebugDrawMesh.FillQuad(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: FillQuad
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2325
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a filled quad.\n"
  example: []
  syntax:
    content: public Quad FillQuad(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4, Color color, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The first point of the quad.
    - id: p2
      type: UnityEngine.Vector3
      description: The second point of the quad.
    - id: p3
      type: UnityEngine.Vector3
      description: The third point of the quad.
    - id: p4
      type: UnityEngine.Vector3
      description: The fourth point of the quad.
    - id: color
      type: UnityEngine.Color
      description: The colour of the quad.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Quad
      description: The ellipse object.
    content.vb: Public Function FillQuad(p1 As Vector3, p2 As Vector3, p3 As Vector3, p4 As Vector3, color As Color, duration As Single = 0F) As Quad
  overload: Global.DebugDrawMesh.FillQuad*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.FillQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.FillQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  id: FillQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: FillQuad(Vector3, Vector3, Vector3, Vector3, Color, Color, Color, Color, Single)
  nameWithType: DebugDrawMesh.FillQuad(Vector3, Vector3, Vector3, Vector3, Color, Color, Color, Color, Single)
  fullName: DebugDrawMesh.FillQuad(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, UnityEngine.Color, UnityEngine.Color, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: FillQuad
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2344
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a filled quad.\n"
  example: []
  syntax:
    content: public Quad FillQuad(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4, Color color1, Color color2, Color color3, Color color4, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The first point of the quad.
    - id: p2
      type: UnityEngine.Vector3
      description: The second point of the quad.
    - id: p3
      type: UnityEngine.Vector3
      description: The third point of the quad.
    - id: p4
      type: UnityEngine.Vector3
      description: The fourth point of the quad.
    - id: color1
      type: UnityEngine.Color
      description: The color of the quad&apos;s first point..
    - id: color2
      type: UnityEngine.Color
      description: The color of the quad&apos;s second point.
    - id: color3
      type: UnityEngine.Color
      description: The color of the quad&apos;s third point.
    - id: color4
      type: UnityEngine.Color
      description: The color of the quad&apos;s fourth point.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Quad
      description: The ellipse object.
    content.vb: Public Function FillQuad(p1 As Vector3, p2 As Vector3, p3 As Vector3, p4 As Vector3, color1 As Color, color2 As Color, color3 As Color, color4 As Color, duration As Single = 0F) As Quad
  overload: Global.DebugDrawMesh.FillQuad*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.FillRectangle(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.FillRectangle(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: FillRectangle(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: FillRectangle(Vector3, Single, Vector3, Color, Single)
  nameWithType: DebugDrawMesh.FillRectangle(Vector3, Single, Vector3, Color, Single)
  fullName: DebugDrawMesh.FillRectangle(UnityEngine.Vector3, System.Single, UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: FillRectangle
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2359
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a filled square.\n"
  example: []
  syntax:
    content: public Rectangle FillRectangle(Vector3 position, float size, Vector3 facing, Color color, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the square.
    - id: size
      type: System.Single
      description: The half size of the square.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the square is facing.
    - id: color
      type: UnityEngine.Color
      description: The colour of the square.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Rectangle
      description: The ellipse object.
    content.vb: Public Function FillRectangle(position As Vector3, size As Single, facing As Vector3, color As Color, duration As Single = 0F) As Rectangle
  overload: Global.DebugDrawMesh.FillRectangle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Rectangle(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Rectangle(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: Rectangle(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Rectangle(Vector3, Single, Vector3, Color, Single)
  nameWithType: DebugDrawMesh.Rectangle(Vector3, Single, Vector3, Color, Single)
  fullName: DebugDrawMesh.Rectangle(UnityEngine.Vector3, System.Single, UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Rectangle
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2374
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wire square.\n"
  example: []
  syntax:
    content: public Rectangle Rectangle(Vector3 position, float size, Vector3 facing, Color color, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the square.
    - id: size
      type: System.Single
      description: The half size of the square.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the square is facing.
    - id: color
      type: UnityEngine.Color
      description: The colour of the square.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Rectangle
      description: The ellipse object.
    content.vb: Public Function Rectangle(position As Vector3, size As Single, facing As Vector3, color As Color, duration As Single = 0F) As Rectangle
  overload: Global.DebugDrawMesh.Rectangle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.FillRectangle(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.FillRectangle(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: FillRectangle(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: FillRectangle(Vector3, Vector2, Vector3, Color, Single)
  nameWithType: DebugDrawMesh.FillRectangle(Vector3, Vector2, Vector3, Color, Single)
  fullName: DebugDrawMesh.FillRectangle(UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: FillRectangle
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2389
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a filled square.\n"
  example: []
  syntax:
    content: public Rectangle FillRectangle(Vector3 position, Vector2 size, Vector3 facing, Color color, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the square.
    - id: size
      type: UnityEngine.Vector2
      description: The half size of the square.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the square is facing.
    - id: color
      type: UnityEngine.Color
      description: The colour of the square.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Rectangle
      description: The ellipse object.
    content.vb: Public Function FillRectangle(position As Vector3, size As Vector2, facing As Vector3, color As Color, duration As Single = 0F) As Rectangle
  overload: Global.DebugDrawMesh.FillRectangle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Rectangle(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Rectangle(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: Rectangle(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Rectangle(Vector3, Vector2, Vector3, Color, Single)
  nameWithType: DebugDrawMesh.Rectangle(Vector3, Vector2, Vector3, Color, Single)
  fullName: DebugDrawMesh.Rectangle(UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Rectangle
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2404
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wire square.\n"
  example: []
  syntax:
    content: public Rectangle Rectangle(Vector3 position, Vector2 size, Vector3 facing, Color color, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the square.
    - id: size
      type: UnityEngine.Vector2
      description: The half size of the square.
    - id: facing
      type: UnityEngine.Vector3
      description: The normal or direction the front of the square is facing.
    - id: color
      type: UnityEngine.Color
      description: The colour of the square.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Rectangle
      description: The ellipse object.
    content.vb: Public Function Rectangle(position As Vector3, size As Vector2, facing As Vector3, color As Color, duration As Single = 0F) As Rectangle
  overload: Global.DebugDrawMesh.Rectangle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Sphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.Sphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  id: Sphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Sphere(Vector3, Single, Color, Int32, Single)
  nameWithType: DebugDrawMesh.Sphere(Vector3, Single, Color, Int32, Single)
  fullName: DebugDrawMesh.Sphere(UnityEngine.Vector3, System.Single, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: Sphere
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2419
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a sphere comprised of a circle for each axis.\n"
  example: []
  syntax:
    content: public Sphere Sphere(Vector3 position, float radius, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the sphere.
    - id: radius
      type: System.Single
      description: The radius of the sphere in each axis.
    - id: color
      type: UnityEngine.Color
      description: The color of the sphere.
    - id: segments
      type: System.Int32
      description: The resolution of the sphere. If set to zero will be adjusted based on the distance to the camera.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Sphere
      description: The Sphere object.
    content.vb: Public Function Sphere(position As Vector3, radius As Single, color As Color, segments As Integer = 32, duration As Single = 0F) As Sphere
  overload: Global.DebugDrawMesh.Sphere*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Sphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.Sphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  id: Sphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Sphere(Vector3, Vector3, Color, Int32, Single)
  nameWithType: DebugDrawMesh.Sphere(Vector3, Vector3, Color, Int32, Single)
  fullName: DebugDrawMesh.Sphere(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: Sphere
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2434
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a sphere comprised of a circle for each axis.\n"
  example: []
  syntax:
    content: public Sphere Sphere(Vector3 position, Vector3 radius, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the sphere.
    - id: radius
      type: UnityEngine.Vector3
      description: The radius of the sphere in each axis.
    - id: color
      type: UnityEngine.Color
      description: The color of the sphere.
    - id: segments
      type: System.Int32
      description: The resolution of the sphere. If set to zero will be adjusted based on the distance to the camera.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Sphere
      description: The Sphere object.
    content.vb: Public Function Sphere(position As Vector3, radius As Vector3, color As Color, segments As Integer = 32, duration As Single = 0F) As Sphere
  overload: Global.DebugDrawMesh.Sphere*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Sphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.Sphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Int32,System.Single)
  id: Sphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Sphere(Vector3, Vector3, Quaternion, Color, Int32, Single)
  nameWithType: DebugDrawMesh.Sphere(Vector3, Vector3, Quaternion, Color, Int32, Single)
  fullName: DebugDrawMesh.Sphere(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: Sphere
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2450
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a sphere comprised of a circle for each axis.\n"
  example: []
  syntax:
    content: public Sphere Sphere(Vector3 position, Vector3 radius, Quaternion orientation, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the sphere.
    - id: radius
      type: UnityEngine.Vector3
      description: The radius of the sphere in each axis.
    - id: orientation
      type: UnityEngine.Quaternion
      description: The orientation of the sphere.
    - id: color
      type: UnityEngine.Color
      description: The color of the sphere.
    - id: segments
      type: System.Int32
      description: The resolution of the sphere.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Sphere
      description: The Sphere object.
    content.vb: Public Function Sphere(position As Vector3, radius As Vector3, orientation As Quaternion, color As Color, segments As Integer = 32, duration As Single = 0F) As Sphere
  overload: Global.DebugDrawMesh.Sphere*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.WireSphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.WireSphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  id: WireSphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: WireSphere(Vector3, Single, Color, Int32, Single)
  nameWithType: DebugDrawMesh.WireSphere(Vector3, Single, Color, Int32, Single)
  fullName: DebugDrawMesh.WireSphere(UnityEngine.Vector3, System.Single, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: WireSphere
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2465
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a full wireframe sphere.\n"
  example: []
  syntax:
    content: public Sphere WireSphere(Vector3 position, float radius, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the sphere.
    - id: radius
      type: System.Single
      description: The radius of the sphere in each axis.
    - id: color
      type: UnityEngine.Color
      description: The color of the sphere.
    - id: segments
      type: System.Int32
      description: The resolution of the sphere. If set to zero will be adjusted based on the distance to the camera.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Sphere
      description: The Sphere object.
    content.vb: Public Function WireSphere(position As Vector3, radius As Single, color As Color, segments As Integer = 32, duration As Single = 0F) As Sphere
  overload: Global.DebugDrawMesh.WireSphere*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.WireSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.WireSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  id: WireSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: WireSphere(Vector3, Vector3, Color, Int32, Single)
  nameWithType: DebugDrawMesh.WireSphere(Vector3, Vector3, Color, Int32, Single)
  fullName: DebugDrawMesh.WireSphere(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: WireSphere
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2480
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a full wireframe sphere.\n"
  example: []
  syntax:
    content: public Sphere WireSphere(Vector3 position, Vector3 radius, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the sphere.
    - id: radius
      type: UnityEngine.Vector3
      description: The radius of the sphere in each axis.
    - id: color
      type: UnityEngine.Color
      description: The color of the sphere.
    - id: segments
      type: System.Int32
      description: The resolution of the sphere. If set to zero will be adjusted based on the distance to the camera.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Sphere
      description: The Sphere object.
    content.vb: Public Function WireSphere(position As Vector3, radius As Vector3, color As Color, segments As Integer = 32, duration As Single = 0F) As Sphere
  overload: Global.DebugDrawMesh.WireSphere*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.WireSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Int32,System.Single)
  commentId: M:Global.DebugDrawMesh.WireSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Int32,System.Single)
  id: WireSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Color,System.Int32,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: WireSphere(Vector3, Vector3, Quaternion, Color, Int32, Single)
  nameWithType: DebugDrawMesh.WireSphere(Vector3, Vector3, Quaternion, Color, Int32, Single)
  fullName: DebugDrawMesh.WireSphere(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Color, System.Int32, System.Single)
  type: Method
  source:
    id: WireSphere
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2496
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a full wireframe sphere.\n"
  example: []
  syntax:
    content: public Sphere WireSphere(Vector3 position, Vector3 radius, Quaternion orientation, Color color, int segments = 32, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The centre of the sphere.
    - id: radius
      type: UnityEngine.Vector3
      description: The radius of the sphere in each axis.
    - id: orientation
      type: UnityEngine.Quaternion
      description: The orientation of the sphere.
    - id: color
      type: UnityEngine.Color
      description: The color of the sphere.
    - id: segments
      type: System.Int32
      description: The resolution of the sphere.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Sphere
      description: The Sphere object.
    content.vb: Public Function WireSphere(position As Vector3, radius As Vector3, orientation As Quaternion, color As Color, segments As Integer = 32, duration As Single = 0F) As Sphere
  overload: Global.DebugDrawMesh.WireSphere*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Text(UnityEngine.Vector3,System.String,UnityEngine.Color,UnityEngine.TextAnchor,System.Single,System.Single)
  commentId: M:Global.DebugDrawMesh.Text(UnityEngine.Vector3,System.String,UnityEngine.Color,UnityEngine.TextAnchor,System.Single,System.Single)
  id: Text(UnityEngine.Vector3,System.String,UnityEngine.Color,UnityEngine.TextAnchor,System.Single,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Text(Vector3, String, Color, TextAnchor, Single, Single)
  nameWithType: DebugDrawMesh.Text(Vector3, String, Color, TextAnchor, Single, Single)
  fullName: DebugDrawMesh.Text(UnityEngine.Vector3, System.String, UnityEngine.Color, UnityEngine.TextAnchor, System.Single, System.Single)
  type: Method
  source:
    id: Text
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2512
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a line.\n"
  example: []
  syntax:
    content: public Text Text(Vector3 position, string text, Color color, TextAnchor align = TextAnchor.UpperLeft, float scale = 1F, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The world space position of the text.
    - id: text
      type: System.String
      description: The text to display.
    - id: color
      type: UnityEngine.Color
      description: The text color.
    - id: align
      type: UnityEngine.TextAnchor
      description: Where to anchor the text.
    - id: scale
      type: System.Single
      description: The text scale. Set to 1 for default.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Text
      description: The Text object.
    content.vb: Public Function Text(position As Vector3, text As String, color As Color, align As TextAnchor = TextAnchor.UpperLeft, scale As Single = 1F, duration As Single = 0F) As Text
  overload: Global.DebugDrawMesh.Text*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Text(UnityEngine.Vector3,System.String,UnityEngine.TextAnchor,System.Single,System.Single)
  commentId: M:Global.DebugDrawMesh.Text(UnityEngine.Vector3,System.String,UnityEngine.TextAnchor,System.Single,System.Single)
  id: Text(UnityEngine.Vector3,System.String,UnityEngine.TextAnchor,System.Single,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Text(Vector3, String, TextAnchor, Single, Single)
  nameWithType: DebugDrawMesh.Text(Vector3, String, TextAnchor, Single, Single)
  fullName: DebugDrawMesh.Text(UnityEngine.Vector3, System.String, UnityEngine.TextAnchor, System.Single, System.Single)
  type: Method
  source:
    id: Text
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2527
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a line.\n"
  example: []
  syntax:
    content: public Text Text(Vector3 position, string text, TextAnchor align = TextAnchor.UpperLeft, float scale = 1F, float duration = 0F)
    parameters:
    - id: position
      type: UnityEngine.Vector3
      description: The world space position of the text.
    - id: text
      type: System.String
      description: The text to display.
    - id: align
      type: UnityEngine.TextAnchor
      description: Where to anchor the text.
    - id: scale
      type: System.Single
      description: The text scale. Set to 1 for default.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist.
    return:
      type: DebugDrawItems.Text
      description: The Text object.
    content.vb: Public Function Text(position As Vector3, text As String, align As TextAnchor = TextAnchor.UpperLeft, scale As Single = 1F, duration As Single = 0F) As Text
  overload: Global.DebugDrawMesh.Text*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Triangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Triangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: Triangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Triangle(Vector3, Vector3, Vector3, Color, Single)
  nameWithType: DebugDrawMesh.Triangle(Vector3, Vector3, Vector3, Color, Single)
  fullName: DebugDrawMesh.Triangle(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Triangle
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2542
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wire triangle.\n"
  example: []
  syntax:
    content: public Triangle Triangle(Vector3 p1, Vector3 p2, Vector3 p3, Color color, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The first point of the triangle.
    - id: p2
      type: UnityEngine.Vector3
      description: The second point of the triangle.
    - id: p3
      type: UnityEngine.Vector3
      description: The third point of the triangle.
    - id: color
      type: UnityEngine.Color
      description: The colour of the triangle.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Triangle
      description: The ellipse object.
    content.vb: Public Function Triangle(p1 As Vector3, p2 As Vector3, p3 As Vector3, color As Color, duration As Single = 0F) As Triangle
  overload: Global.DebugDrawMesh.Triangle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.Triangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.Triangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  id: Triangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: Triangle(Vector3, Vector3, Vector3, Color, Color, Color, Single)
  nameWithType: DebugDrawMesh.Triangle(Vector3, Vector3, Vector3, Color, Color, Color, Single)
  fullName: DebugDrawMesh.Triangle(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, UnityEngine.Color, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: Triangle
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2559
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a wire triangle.\n"
  example: []
  syntax:
    content: public Triangle Triangle(Vector3 p1, Vector3 p2, Vector3 p3, Color color1, Color color2, Color color3, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The first point of the triangle.
    - id: p2
      type: UnityEngine.Vector3
      description: The second point of the triangle.
    - id: p3
      type: UnityEngine.Vector3
      description: The third point of the triangle.
    - id: color1
      type: UnityEngine.Color
      description: The color of the triangle&apos;s first point..
    - id: color2
      type: UnityEngine.Color
      description: The color of the triangle&apos;s second point.
    - id: color3
      type: UnityEngine.Color
      description: The color of the triangle&apos;s third point.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Triangle
      description: The ellipse object.
    content.vb: Public Function Triangle(p1 As Vector3, p2 As Vector3, p3 As Vector3, color1 As Color, color2 As Color, color3 As Color, duration As Single = 0F) As Triangle
  overload: Global.DebugDrawMesh.Triangle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.FillTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.FillTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  id: FillTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: FillTriangle(Vector3, Vector3, Vector3, Color, Single)
  nameWithType: DebugDrawMesh.FillTriangle(Vector3, Vector3, Vector3, Color, Single)
  fullName: DebugDrawMesh.FillTriangle(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: FillTriangle
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2574
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a filled triangle.\n"
  example: []
  syntax:
    content: public Triangle FillTriangle(Vector3 p1, Vector3 p2, Vector3 p3, Color color, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The first point of the triangle.
    - id: p2
      type: UnityEngine.Vector3
      description: The second point of the triangle.
    - id: p3
      type: UnityEngine.Vector3
      description: The third point of the triangle.
    - id: color
      type: UnityEngine.Color
      description: The colour of the triangle.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Triangle
      description: The ellipse object.
    content.vb: Public Function FillTriangle(p1 As Vector3, p2 As Vector3, p3 As Vector3, color As Color, duration As Single = 0F) As Triangle
  overload: Global.DebugDrawMesh.FillTriangle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.DebugDrawMesh.FillTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  commentId: M:Global.DebugDrawMesh.FillTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  id: FillTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,System.Single)
  parent: Global.DebugDrawMesh
  langs:
  - csharp
  - vb
  name: FillTriangle(Vector3, Vector3, Vector3, Color, Color, Color, Single)
  nameWithType: DebugDrawMesh.FillTriangle(Vector3, Vector3, Vector3, Color, Color, Color, Single)
  fullName: DebugDrawMesh.FillTriangle(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Color, UnityEngine.Color, UnityEngine.Color, System.Single)
  type: Method
  source:
    id: FillTriangle
    path: D:\Unity\CustomPackages\DebugDraw\Assets\DebugDraw\Runtime\DebugDrawMethods.cs
    startLine: 2591
  assemblies:
  - c.DebugDraw.Runtime
  namespace: Global
  summary: "\nDraws a filled triangle.\n"
  example: []
  syntax:
    content: public Triangle FillTriangle(Vector3 p1, Vector3 p2, Vector3 p3, Color color1, Color color2, Color color3, float duration = 0F)
    parameters:
    - id: p1
      type: UnityEngine.Vector3
      description: The first point of the triangle.
    - id: p2
      type: UnityEngine.Vector3
      description: The second point of the triangle.
    - id: p3
      type: UnityEngine.Vector3
      description: The third point of the triangle.
    - id: color1
      type: UnityEngine.Color
      description: The color of the triangle&apos;s first point..
    - id: color2
      type: UnityEngine.Color
      description: The color of the triangle&apos;s second point.
    - id: color3
      type: UnityEngine.Color
      description: The color of the triangle&apos;s third point.
    - id: duration
      type: System.Single
      description: How long the item will last in seconds. Set to 0 for only the next frame, and negative to persist forever.
    return:
      type: DebugDrawItems.Triangle
      description: The ellipse object.
    content.vb: Public Function FillTriangle(p1 As Vector3, p2 As Vector3, p3 As Vector3, color1 As Color, color2 As Color, color3 As Color, duration As Single = 0F) As Triangle
  overload: Global.DebugDrawMesh.FillTriangle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DebugDraw
  commentId: T:DebugDraw
  isExternal: true
- uid: Global
  name: Global
  nameWithType: Global
  fullName: Global
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DebugDrawMesh.Build
  commentId: M:DebugDrawMesh.Build
  isExternal: true
- uid: System.Collections.Generic.List{UnityEngine.Vector3}
  commentId: T:System.Collections.Generic.List{UnityEngine.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3>
  nameWithType: List<Vector3>
  fullName: System.Collections.Generic.List<UnityEngine.Vector3>
  nameWithType.vb: List(Of Vector3)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.Vector3)
  name.vb: List(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: UnityEngine.Vector3
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: UnityEngine.Vector3
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{UnityEngine.Color}
  commentId: T:System.Collections.Generic.List{UnityEngine.Color}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Color>
  nameWithType: List<Color>
  fullName: System.Collections.Generic.List<UnityEngine.Color>
  nameWithType.vb: List(Of Color)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.Color)
  name.vb: List(Of Color)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.Color
    name: Color
    nameWithType: Color
    fullName: UnityEngine.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.Color
    name: Color
    nameWithType: Color
    fullName: UnityEngine.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{DebugDrawItems.BaseItem}
  commentId: T:System.Collections.Generic.List{DebugDrawItems.BaseItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<BaseItem>
  nameWithType: List<BaseItem>
  fullName: System.Collections.Generic.List<DebugDrawItems.BaseItem>
  nameWithType.vb: List(Of BaseItem)
  fullName.vb: System.Collections.Generic.List(Of DebugDrawItems.BaseItem)
  name.vb: List(Of BaseItem)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DebugDrawItems.BaseItem
    name: BaseItem
    nameWithType: BaseItem
    fullName: DebugDrawItems.BaseItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DebugDrawItems.BaseItem
    name: BaseItem
    nameWithType: BaseItem
    fullName: DebugDrawItems.BaseItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.DebugDrawMesh.#ctor*
  commentId: Overload:Global.DebugDrawMesh.#ctor
  name: DebugDrawMesh
  nameWithType: DebugDrawMesh.DebugDrawMesh
  fullName: DebugDrawMesh.DebugDrawMesh
- uid: UnityEngine.MeshTopology
  commentId: T:UnityEngine.MeshTopology
  parent: UnityEngine
  isExternal: true
  name: MeshTopology
  nameWithType: MeshTopology
  fullName: UnityEngine.MeshTopology
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.DebugDrawMesh.CreateMesh*
  commentId: Overload:Global.DebugDrawMesh.CreateMesh
  name: CreateMesh
  nameWithType: DebugDrawMesh.CreateMesh
  fullName: DebugDrawMesh.CreateMesh
- uid: Global.DebugDrawMesh.SetInvertColours*
  commentId: Overload:Global.DebugDrawMesh.SetInvertColours
  name: SetInvertColours
  nameWithType: DebugDrawMesh.SetInvertColours
  fullName: DebugDrawMesh.SetInvertColours
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Global.DebugDrawMesh
  commentId: T:Global.DebugDrawMesh
  name: DebugDrawMesh
  nameWithType: DebugDrawMesh
  fullName: DebugDrawMesh
- uid: Global.DebugDrawMesh.SetCulling*
  commentId: Overload:Global.DebugDrawMesh.SetCulling
  name: SetCulling
  nameWithType: DebugDrawMesh.SetCulling
  fullName: DebugDrawMesh.SetCulling
- uid: UnityEngine.Rendering.CullMode
  commentId: T:UnityEngine.Rendering.CullMode
  parent: UnityEngine.Rendering
  isExternal: true
  name: CullMode
  nameWithType: CullMode
  fullName: UnityEngine.Rendering.CullMode
- uid: UnityEngine.Rendering
  commentId: N:UnityEngine.Rendering
  isExternal: true
  name: UnityEngine.Rendering
  nameWithType: UnityEngine.Rendering
  fullName: UnityEngine.Rendering
- uid: Global.DebugDrawMesh.SetDepthTesting*
  commentId: Overload:Global.DebugDrawMesh.SetDepthTesting
  name: SetDepthTesting
  nameWithType: DebugDrawMesh.SetDepthTesting
  fullName: DebugDrawMesh.SetDepthTesting
- uid: DebugDrawItems.Line
  commentId: T:DebugDrawItems.Line
  parent: DebugDrawItems
  name: Line
  nameWithType: Line
  fullName: DebugDrawItems.Line
- uid: Global.DebugDrawMesh.Add*
  commentId: Overload:Global.DebugDrawMesh.Add
  name: Add
  nameWithType: DebugDrawMesh.Add
  fullName: DebugDrawMesh.Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: DebugDrawItems
  commentId: N:DebugDrawItems
  name: DebugDrawItems
  nameWithType: DebugDrawItems
  fullName: DebugDrawItems
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Global.DebugDrawMesh.Remove*
  commentId: Overload:Global.DebugDrawMesh.Remove
  name: Remove
  nameWithType: DebugDrawMesh.Remove
  fullName: DebugDrawMesh.Remove
- uid: DebugDrawItems.BaseItem
  commentId: T:DebugDrawItems.BaseItem
  parent: DebugDrawItems
  name: BaseItem
  nameWithType: BaseItem
  fullName: DebugDrawItems.BaseItem
- uid: Global.DebugDrawMesh.Clear*
  commentId: Overload:Global.DebugDrawMesh.Clear
  name: Clear
  nameWithType: DebugDrawMesh.Clear
  fullName: DebugDrawMesh.Clear
- uid: Global.DebugDrawMesh.ClearMesh*
  commentId: Overload:Global.DebugDrawMesh.ClearMesh
  name: ClearMesh
  nameWithType: DebugDrawMesh.ClearMesh
  fullName: DebugDrawMesh.ClearMesh
- uid: Global.DebugDrawMesh.ClearAll*
  commentId: Overload:Global.DebugDrawMesh.ClearAll
  name: ClearAll
  nameWithType: DebugDrawMesh.ClearAll
  fullName: DebugDrawMesh.ClearAll
- uid: Global.DebugDrawMesh.Update*
  commentId: Overload:Global.DebugDrawMesh.Update
  name: Update
  nameWithType: DebugDrawMesh.Update
  fullName: DebugDrawMesh.Update
- uid: DebugDrawMesh.vertices
  commentId: F:DebugDrawMesh.vertices
  isExternal: true
- uid: DebugDrawMesh.colours
  commentId: F:DebugDrawMesh.colours
  isExternal: true
- uid: DebugDrawMesh.indices
  commentId: F:DebugDrawMesh.indices
  isExternal: true
- uid: DebugDrawMesh.UpdateMesh(UnityEngine.Mesh)
  commentId: M:DebugDrawMesh.UpdateMesh(UnityEngine.Mesh)
  isExternal: true
- uid: DebugDrawMesh.Mesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Collections.Generic.List{System.Int32},System.Single)
  commentId: M:DebugDrawMesh.Mesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Color},System.Collections.Generic.List{System.Int32},System.Single)
  isExternal: true
- uid: Global.DebugDrawMesh.Build*
  commentId: Overload:Global.DebugDrawMesh.Build
  name: Build
  nameWithType: DebugDrawMesh.Build
  fullName: DebugDrawMesh.Build
- uid: DebugDrawMesh.CreateMesh
  commentId: M:DebugDrawMesh.CreateMesh
  isExternal: true
- uid: Global.DebugDrawMesh.UpdateMesh*
  commentId: Overload:Global.DebugDrawMesh.UpdateMesh
  name: UpdateMesh
  nameWithType: DebugDrawMesh.UpdateMesh
  fullName: DebugDrawMesh.UpdateMesh
- uid: UnityEngine.Mesh
  commentId: T:UnityEngine.Mesh
  parent: UnityEngine
  isExternal: true
  name: Mesh
  nameWithType: Mesh
  fullName: UnityEngine.Mesh
- uid: DebugDrawMesh.vertexIndex
  commentId: F:DebugDrawMesh.vertexIndex
  isExternal: true
- uid: Global.DebugDrawMesh.AddIndex*
  commentId: Overload:Global.DebugDrawMesh.AddIndex
  name: AddIndex
  nameWithType: DebugDrawMesh.AddIndex
  fullName: DebugDrawMesh.AddIndex
- uid: Global.DebugDrawMesh.AddIndexX2*
  commentId: Overload:Global.DebugDrawMesh.AddIndexX2
  name: AddIndexX2
  nameWithType: DebugDrawMesh.AddIndexX2
  fullName: DebugDrawMesh.AddIndexX2
- uid: Global.DebugDrawMesh.AddIndexX3*
  commentId: Overload:Global.DebugDrawMesh.AddIndexX3
  name: AddIndexX3
  nameWithType: DebugDrawMesh.AddIndexX3
  fullName: DebugDrawMesh.AddIndexX3
- uid: Global.DebugDrawMesh.AddIndexX4*
  commentId: Overload:Global.DebugDrawMesh.AddIndexX4
  name: AddIndexX4
  nameWithType: DebugDrawMesh.AddIndexX4
  fullName: DebugDrawMesh.AddIndexX4
- uid: Global.DebugDrawMesh.AddIndices*
  commentId: Overload:Global.DebugDrawMesh.AddIndices
  name: AddIndices
  nameWithType: DebugDrawMesh.AddIndices
  fullName: DebugDrawMesh.AddIndices
- uid: Global.DebugDrawMesh.AddPreviousVertexIndex*
  commentId: Overload:Global.DebugDrawMesh.AddPreviousVertexIndex
  name: AddPreviousVertexIndex
  nameWithType: DebugDrawMesh.AddPreviousVertexIndex
  fullName: DebugDrawMesh.AddPreviousVertexIndex
- uid: Global.DebugDrawMesh.AddTriangleLineIndices*
  commentId: Overload:Global.DebugDrawMesh.AddTriangleLineIndices
  name: AddTriangleLineIndices
  nameWithType: DebugDrawMesh.AddTriangleLineIndices
  fullName: DebugDrawMesh.AddTriangleLineIndices
- uid: Global.DebugDrawMesh.AddQuadLineIndices*
  commentId: Overload:Global.DebugDrawMesh.AddQuadLineIndices
  name: AddQuadLineIndices
  nameWithType: DebugDrawMesh.AddQuadLineIndices
  fullName: DebugDrawMesh.AddQuadLineIndices
- uid: Global.DebugDrawMesh.AddColor*
  commentId: Overload:Global.DebugDrawMesh.AddColor
  name: AddColor
  nameWithType: DebugDrawMesh.AddColor
  fullName: DebugDrawMesh.AddColor
- uid: UnityEngine.Color
  commentId: T:UnityEngine.Color
  parent: UnityEngine
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: UnityEngine.Color
- uid: Global.DebugDrawMesh.AddColorX2*
  commentId: Overload:Global.DebugDrawMesh.AddColorX2
  name: AddColorX2
  nameWithType: DebugDrawMesh.AddColorX2
  fullName: DebugDrawMesh.AddColorX2
- uid: Global.DebugDrawMesh.AddColorX3*
  commentId: Overload:Global.DebugDrawMesh.AddColorX3
  name: AddColorX3
  nameWithType: DebugDrawMesh.AddColorX3
  fullName: DebugDrawMesh.AddColorX3
- uid: Global.DebugDrawMesh.AddColorX4*
  commentId: Overload:Global.DebugDrawMesh.AddColorX4
  name: AddColorX4
  nameWithType: DebugDrawMesh.AddColorX4
  fullName: DebugDrawMesh.AddColorX4
- uid: Global.DebugDrawMesh.AddColors*
  commentId: Overload:Global.DebugDrawMesh.AddColors
  name: AddColors
  nameWithType: DebugDrawMesh.AddColors
  fullName: DebugDrawMesh.AddColors
- uid: Global.DebugDrawMesh.AddVertex*
  commentId: Overload:Global.DebugDrawMesh.AddVertex
  name: AddVertex
  nameWithType: DebugDrawMesh.AddVertex
  fullName: DebugDrawMesh.AddVertex
- uid: UnityEngine.Vector3
  commentId: T:UnityEngine.Vector3
  parent: UnityEngine
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: UnityEngine.Vector3
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Global.DebugDrawMesh.AddLine*
  commentId: Overload:Global.DebugDrawMesh.AddLine
  name: AddLine
  nameWithType: DebugDrawMesh.AddLine
  fullName: DebugDrawMesh.AddLine
- uid: UnityEngine.Matrix4x4
  commentId: T:UnityEngine.Matrix4x4
  parent: UnityEngine
  isExternal: true
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: UnityEngine.Matrix4x4
- uid: Global.DebugDrawMesh.AddVertices*
  commentId: Overload:Global.DebugDrawMesh.AddVertices
  name: AddVertices
  nameWithType: DebugDrawMesh.AddVertices
  fullName: DebugDrawMesh.AddVertices
- uid: Global.DebugDrawMesh.AddLines*
  commentId: Overload:Global.DebugDrawMesh.AddLines
  name: AddLines
  nameWithType: DebugDrawMesh.AddLines
  fullName: DebugDrawMesh.AddLines
- uid: Global.DebugDrawMesh.AddPoints*
  commentId: Overload:Global.DebugDrawMesh.AddPoints
  name: AddPoints
  nameWithType: DebugDrawMesh.AddPoints
  fullName: DebugDrawMesh.AddPoints
- uid: Global.DebugDrawMesh.Arrow*
  commentId: Overload:Global.DebugDrawMesh.Arrow
  name: Arrow
  nameWithType: DebugDrawMesh.Arrow
  fullName: DebugDrawMesh.Arrow
- uid: DebugDrawItems.ArrowShape
  commentId: T:DebugDrawItems.ArrowShape
  parent: DebugDrawItems
  name: ArrowShape
  nameWithType: ArrowShape
  fullName: DebugDrawItems.ArrowShape
- uid: DebugDrawItems.Arrow
  commentId: T:DebugDrawItems.Arrow
  parent: DebugDrawItems
  name: Arrow
  nameWithType: Arrow
  fullName: DebugDrawItems.Arrow
- uid: Global.DebugDrawMesh.Axes*
  commentId: Overload:Global.DebugDrawMesh.Axes
  name: Axes
  nameWithType: DebugDrawMesh.Axes
  fullName: DebugDrawMesh.Axes
- uid: UnityEngine.Quaternion
  commentId: T:UnityEngine.Quaternion
  parent: UnityEngine
  isExternal: true
  name: Quaternion
  nameWithType: Quaternion
  fullName: UnityEngine.Quaternion
- uid: DebugDrawItems.Axes
  commentId: T:DebugDrawItems.Axes
  parent: DebugDrawItems
  name: Axes
  nameWithType: Axes
  fullName: DebugDrawItems.Axes
- uid: Global.DebugDrawMesh.Box*
  commentId: Overload:Global.DebugDrawMesh.Box
  name: Box
  nameWithType: DebugDrawMesh.Box
  fullName: DebugDrawMesh.Box
- uid: DebugDrawItems.Box
  commentId: T:DebugDrawItems.Box
  parent: DebugDrawItems
  name: Box
  nameWithType: Box
  fullName: DebugDrawItems.Box
- uid: Global.DebugDrawMesh.Capsule*
  commentId: Overload:Global.DebugDrawMesh.Capsule
  name: Capsule
  nameWithType: DebugDrawMesh.Capsule
  fullName: DebugDrawMesh.Capsule
- uid: DebugDrawItems.Capsule
  commentId: T:DebugDrawItems.Capsule
  parent: DebugDrawItems
  name: Capsule
  nameWithType: Capsule
  fullName: DebugDrawItems.Capsule
- uid: Global.DebugDrawMesh.WireCapsule*
  commentId: Overload:Global.DebugDrawMesh.WireCapsule
  name: WireCapsule
  nameWithType: DebugDrawMesh.WireCapsule
  fullName: DebugDrawMesh.WireCapsule
- uid: Global.DebugDrawMesh.Cone*
  commentId: Overload:Global.DebugDrawMesh.Cone
  name: Cone
  nameWithType: DebugDrawMesh.Cone
  fullName: DebugDrawMesh.Cone
- uid: DebugDrawItems.Cone
  commentId: T:DebugDrawItems.Cone
  parent: DebugDrawItems
  name: Cone
  nameWithType: Cone
  fullName: DebugDrawItems.Cone
- uid: Global.DebugDrawMesh.WireCone*
  commentId: Overload:Global.DebugDrawMesh.WireCone
  name: WireCone
  nameWithType: DebugDrawMesh.WireCone
  fullName: DebugDrawMesh.WireCone
- uid: Global.DebugDrawMesh.Cylinder*
  commentId: Overload:Global.DebugDrawMesh.Cylinder
  name: Cylinder
  nameWithType: DebugDrawMesh.Cylinder
  fullName: DebugDrawMesh.Cylinder
- uid: DebugDrawItems.Cylinder
  commentId: T:DebugDrawItems.Cylinder
  parent: DebugDrawItems
  name: Cylinder
  nameWithType: Cylinder
  fullName: DebugDrawItems.Cylinder
- uid: UnityEngine.Vector2
  commentId: T:UnityEngine.Vector2
  parent: UnityEngine
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: Global.DebugDrawMesh.WireCylinder*
  commentId: Overload:Global.DebugDrawMesh.WireCylinder
  name: WireCylinder
  nameWithType: DebugDrawMesh.WireCylinder
  fullName: DebugDrawMesh.WireCylinder
- uid: Global.DebugDrawMesh.Dot*
  commentId: Overload:Global.DebugDrawMesh.Dot
  name: Dot
  nameWithType: DebugDrawMesh.Dot
  fullName: DebugDrawMesh.Dot
- uid: DebugDrawItems.Dot
  commentId: T:DebugDrawItems.Dot
  parent: DebugDrawItems
  name: Dot
  nameWithType: Dot
  fullName: DebugDrawItems.Dot
- uid: Global.DebugDrawMesh.Dots*
  commentId: Overload:Global.DebugDrawMesh.Dots
  name: Dots
  nameWithType: DebugDrawMesh.Dots
  fullName: DebugDrawMesh.Dots
- uid: System.Collections.Generic.List{System.Single}
  commentId: T:System.Collections.Generic.List{System.Single}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Single>
  nameWithType: List<Single>
  fullName: System.Collections.Generic.List<System.Single>
  nameWithType.vb: List(Of Single)
  fullName.vb: System.Collections.Generic.List(Of System.Single)
  name.vb: List(Of Single)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DebugDrawItems.Dots
  commentId: T:DebugDrawItems.Dots
  parent: DebugDrawItems
  name: Dots
  nameWithType: Dots
  fullName: DebugDrawItems.Dots
- uid: Global.DebugDrawMesh.Ellipse*
  commentId: Overload:Global.DebugDrawMesh.Ellipse
  name: Ellipse
  nameWithType: DebugDrawMesh.Ellipse
  fullName: DebugDrawMesh.Ellipse
- uid: DebugDrawItems.DrawEllipseAxes
  commentId: T:DebugDrawItems.DrawEllipseAxes
  parent: DebugDrawItems
  name: DrawEllipseAxes
  nameWithType: DrawEllipseAxes
  fullName: DebugDrawItems.DrawEllipseAxes
- uid: DebugDrawItems.Ellipse
  commentId: T:DebugDrawItems.Ellipse
  parent: DebugDrawItems
  name: Ellipse
  nameWithType: Ellipse
  fullName: DebugDrawItems.Ellipse
- uid: Global.DebugDrawMesh.FillEllipse*
  commentId: Overload:Global.DebugDrawMesh.FillEllipse
  name: FillEllipse
  nameWithType: DebugDrawMesh.FillEllipse
  fullName: DebugDrawMesh.FillEllipse
- uid: Global.DebugDrawMesh.Arc*
  commentId: Overload:Global.DebugDrawMesh.Arc
  name: Arc
  nameWithType: DebugDrawMesh.Arc
  fullName: DebugDrawMesh.Arc
- uid: DebugDrawItems.DrawArcSegments
  commentId: T:DebugDrawItems.DrawArcSegments
  parent: DebugDrawItems
  name: DrawArcSegments
  nameWithType: DrawArcSegments
  fullName: DebugDrawItems.DrawArcSegments
- uid: Global.DebugDrawMesh.FillArc*
  commentId: Overload:Global.DebugDrawMesh.FillArc
  name: FillArc
  nameWithType: DebugDrawMesh.FillArc
  fullName: DebugDrawMesh.FillArc
- uid: Global.DebugDrawMesh.Line*
  commentId: Overload:Global.DebugDrawMesh.Line
  name: Line
  nameWithType: DebugDrawMesh.Line
  fullName: DebugDrawMesh.Line
- uid: Global.DebugDrawMesh.Line3D*
  commentId: Overload:Global.DebugDrawMesh.Line3D
  name: Line3D
  nameWithType: DebugDrawMesh.Line3D
  fullName: DebugDrawMesh.Line3D
- uid: DebugDrawItems.Line3D
  commentId: T:DebugDrawItems.Line3D
  parent: DebugDrawItems
  name: Line3D
  nameWithType: Line3D
  fullName: DebugDrawItems.Line3D
- uid: Global.DebugDrawMesh.Lines*
  commentId: Overload:Global.DebugDrawMesh.Lines
  name: Lines
  nameWithType: DebugDrawMesh.Lines
  fullName: DebugDrawMesh.Lines
- uid: DebugDrawItems.Lines
  commentId: T:DebugDrawItems.Lines
  parent: DebugDrawItems
  name: Lines
  nameWithType: Lines
  fullName: DebugDrawItems.Lines
- uid: Global.DebugDrawMesh.Lines3D*
  commentId: Overload:Global.DebugDrawMesh.Lines3D
  name: Lines3D
  nameWithType: DebugDrawMesh.Lines3D
  fullName: DebugDrawMesh.Lines3D
- uid: DebugDrawItems.Lines3D
  commentId: T:DebugDrawItems.Lines3D
  parent: DebugDrawItems
  name: Lines3D
  nameWithType: Lines3D
  fullName: DebugDrawItems.Lines3D
- uid: System.Nullable{UnityEngine.Vector3}
  commentId: T:System.Nullable{UnityEngine.Vector3}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Vector3>
  nameWithType: Nullable<Vector3>
  fullName: System.Nullable<UnityEngine.Vector3>
  nameWithType.vb: Nullable(Of Vector3)
  fullName.vb: System.Nullable(Of UnityEngine.Vector3)
  name.vb: Nullable(Of Vector3)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: UnityEngine.Vector3
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: UnityEngine.Vector3
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.DebugDrawMesh.Mesh*
  commentId: Overload:Global.DebugDrawMesh.Mesh
  name: Mesh
  nameWithType: DebugDrawMesh.Mesh
  fullName: DebugDrawMesh.Mesh
- uid: DebugDrawItems.MeshItem
  commentId: T:DebugDrawItems.MeshItem
  parent: DebugDrawItems
  name: MeshItem
  nameWithType: MeshItem
  fullName: DebugDrawItems.MeshItem
- uid: System.Nullable{UnityEngine.Color}
  commentId: T:System.Nullable{UnityEngine.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<UnityEngine.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of UnityEngine.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.Color
    name: Color
    nameWithType: Color
    fullName: UnityEngine.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.Color
    name: Color
    nameWithType: Color
    fullName: UnityEngine.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.DebugDrawMesh.Point*
  commentId: Overload:Global.DebugDrawMesh.Point
  name: Point
  nameWithType: DebugDrawMesh.Point
  fullName: DebugDrawMesh.Point
- uid: DebugDrawItems.Point
  commentId: T:DebugDrawItems.Point
  parent: DebugDrawItems
  name: Point
  nameWithType: Point
  fullName: DebugDrawItems.Point
- uid: Global.DebugDrawMesh.Points*
  commentId: Overload:Global.DebugDrawMesh.Points
  name: Points
  nameWithType: DebugDrawMesh.Points
  fullName: DebugDrawMesh.Points
- uid: DebugDrawItems.Points
  commentId: T:DebugDrawItems.Points
  parent: DebugDrawItems
  name: Points
  nameWithType: Points
  fullName: DebugDrawItems.Points
- uid: Global.DebugDrawMesh.Quad*
  commentId: Overload:Global.DebugDrawMesh.Quad
  name: Quad
  nameWithType: DebugDrawMesh.Quad
  fullName: DebugDrawMesh.Quad
- uid: DebugDrawItems.Quad
  commentId: T:DebugDrawItems.Quad
  parent: DebugDrawItems
  name: Quad
  nameWithType: Quad
  fullName: DebugDrawItems.Quad
- uid: Global.DebugDrawMesh.FillQuad*
  commentId: Overload:Global.DebugDrawMesh.FillQuad
  name: FillQuad
  nameWithType: DebugDrawMesh.FillQuad
  fullName: DebugDrawMesh.FillQuad
- uid: Global.DebugDrawMesh.FillRectangle*
  commentId: Overload:Global.DebugDrawMesh.FillRectangle
  name: FillRectangle
  nameWithType: DebugDrawMesh.FillRectangle
  fullName: DebugDrawMesh.FillRectangle
- uid: DebugDrawItems.Rectangle
  commentId: T:DebugDrawItems.Rectangle
  parent: DebugDrawItems
  name: Rectangle
  nameWithType: Rectangle
  fullName: DebugDrawItems.Rectangle
- uid: Global.DebugDrawMesh.Rectangle*
  commentId: Overload:Global.DebugDrawMesh.Rectangle
  name: Rectangle
  nameWithType: DebugDrawMesh.Rectangle
  fullName: DebugDrawMesh.Rectangle
- uid: Global.DebugDrawMesh.Sphere*
  commentId: Overload:Global.DebugDrawMesh.Sphere
  name: Sphere
  nameWithType: DebugDrawMesh.Sphere
  fullName: DebugDrawMesh.Sphere
- uid: DebugDrawItems.Sphere
  commentId: T:DebugDrawItems.Sphere
  parent: DebugDrawItems
  name: Sphere
  nameWithType: Sphere
  fullName: DebugDrawItems.Sphere
- uid: Global.DebugDrawMesh.WireSphere*
  commentId: Overload:Global.DebugDrawMesh.WireSphere
  name: WireSphere
  nameWithType: DebugDrawMesh.WireSphere
  fullName: DebugDrawMesh.WireSphere
- uid: Global.DebugDrawMesh.Text*
  commentId: Overload:Global.DebugDrawMesh.Text
  name: Text
  nameWithType: DebugDrawMesh.Text
  fullName: DebugDrawMesh.Text
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: UnityEngine.TextAnchor
  commentId: T:UnityEngine.TextAnchor
  parent: UnityEngine
  isExternal: true
  name: TextAnchor
  nameWithType: TextAnchor
  fullName: UnityEngine.TextAnchor
- uid: DebugDrawItems.Text
  commentId: T:DebugDrawItems.Text
  parent: DebugDrawItems
  name: Text
  nameWithType: Text
  fullName: DebugDrawItems.Text
- uid: Global.DebugDrawMesh.Triangle*
  commentId: Overload:Global.DebugDrawMesh.Triangle
  name: Triangle
  nameWithType: DebugDrawMesh.Triangle
  fullName: DebugDrawMesh.Triangle
- uid: DebugDrawItems.Triangle
  commentId: T:DebugDrawItems.Triangle
  parent: DebugDrawItems
  name: Triangle
  nameWithType: Triangle
  fullName: DebugDrawItems.Triangle
- uid: Global.DebugDrawMesh.FillTriangle*
  commentId: Overload:Global.DebugDrawMesh.FillTriangle
  name: FillTriangle
  nameWithType: DebugDrawMesh.FillTriangle
  fullName: DebugDrawMesh.FillTriangle
